#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

usage()
{
	echo "$@"
	cat <<- EOF
	Usage:
	$0 [options] program [program_option...]

	Options:
	-s \$signal
	    Set the signal to be sent to the process to \$signal.
	    The default value for \$signal is SIGTERM.
	-t \$timeout
	    Send a signal to the process if it is still running after a period of \$timeout.
	-k \$timeout
	    Send a SIGKILL signal to the process if it is still running after a
	    period of \$timeout elapses from the initial SIGTERM signal being sent.
	-v
	    Increase the verbosity of the output.
	EOF
	exit 2
}

signal=SIGTERM
allow_break=1
debug_level=${ARI_DEBUG_LEVEL:-0}
timeout=
kill_after_timeout=10
verbose=0

while getopts t:D:vk:s: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	s)
		signal="$OPTARG";;
	t)
		timeout="$OPTARG";;
	k)
		kill_after_timeout="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -lt 1 ]; then
	usage "no program specified"
fi

program_file="$1"
shift 1
program_options=("$@")

program_name=$(basename "$program_file") || panic

if [ -n "$timeout" ]; then
	if [ "$allow_break" -ne 0 ]; then
		pid=
		trap '[ -n "$pid" ] && kill -INT -$pid' INT
		timeout -s "$signal" -k "$kill_after_timeout" "${timeout}s" \
		  "$program_file" "${program_options[@]}" &
		pid=$!
		wait $pid
		status=$?
	else
		timeout -s "$signal" -k "$kill_after_timeout" "${timeout}s" \
		  "$program_file" "${program_options[@]}"
		status=$?
	fi
else
	"$program_file" "${program_options[@]}"
	status=$?
fi

if [ "$verbose" -ge 1 ]; then
	if [ -n "$timeout" -a \
	  \( "$status" -eq 124 -o "$status" -eq 137 \) ]; then
			echo "program $program_name terminated due to run time exceeding $timeout seconds"
	fi
fi

exit "$status"
