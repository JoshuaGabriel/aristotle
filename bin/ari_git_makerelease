#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

perror()
{
	echo "ERROR: $@"
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-D debug_level
	    Set the debug level to debug_level.
	-b branch_or_tag_name
	    Set the branch/tag to be extracted to branch_or_tag_name.
	-t output_type
	    Set the output type to output_type.
	    Allowed values: dir, zip, tgz
	-c
	    Check (i.e., verify) the signature of the tag.
	-v
	    Increase the verbosity level of output.
	EOF
	exit 2
}

user_name=$(whoami) || panic "cannot determine user"
host_name=$(hostname) || panic "cannot determine hostname"
tmp_dir_template="/tmp/ari_git_makerelease-${user_name}@${host_name}-$$-XXXXXXXX"

ari_mktemp="$cmd_dir/ari_mktemp"

cleanup=1
output_type=
branch=
verify_sig=0
verbose=0

while getopts D:b:ct:v option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	b)
		branch="$OPTARG";;
	t)
		output_type="$OPTARG";;
	c)
		verify_sig=1;;
	v)
		verbose=$((verbose + 1));;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage "invalid number of arguments"
fi

repo="$1"
output_file="$2"

if [ "$verify_sig" -ne 0 -a -z "$branch" ]; then
	usage "no tag specified (via -b option) and signature check requested"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$debug_level" -ge 1 ]; then
	discard_stdout=none
	discard_stderr=none
	discard_stdout_stderr=none
else
	discard_stdout=stdout
	discard_stderr=stderr
	discard_stdout_stderr=stdout_stderr
fi

command_status=0
while true; do

	if [ -z "$output_type" ]; then
		case "$output_file" in
		*.tar.gz|*.tgz)
			output_type=tgz;;
		*.zip)
			output_type=zip;;
		*)
			output_type=dir;;
		esac
	fi

	# Note: should we also use -L here?
	if [ -e "$output_file" ]; then
		command_status=1
		perror "output already exists $output_file"
		break
	fi

	tmp_dir=$("$ari_mktemp" -d "$tmp_dir_template")
	if [ $? -ne 0 ]; then
		command_status=1
		perror "cannot make temporary directory"
		break
	fi

	# Clone the repository.
	conditionally_discard_output "$discard_stdout_stderr" \
	  git clone -q "$repo" "$tmp_dir"
	if [ $? -ne 0 ]; then
		command_status=1
		perror "cannot clone repository $repo"
		break
	fi

	# Check for an empty repository.
	GIT_DIR="$tmp_dir/.git" \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git rev-list -n 1 --all
	if [ $? -ne 0 ]; then
		empty_repo=1
	else
		empty_repo=0
	fi
	if [ "$empty_repo" -ne 0 ]; then
		command_status=1
		perror "cannot process empty repository"
		break
	fi

	if [ "$verify_sig" -ne 0 ]; then

		# Check for the existence of the tag.
		GIT_DIR="$tmp_dir/.git" \
		  conditionally_discard_output "$discard_stdout_stderr" \
		  git rev-parse -q --verify "$branch"
		if [ $? -ne 0 ]; then
			tag_found=0
		else
			tag_found=1
		fi
		if [ "$tag_found" -ne 0 ]; then
			GIT_DIR="$tmp_dir/.git" \
			  conditionally_discard_output "$discard_stdout_stderr" \
			  git tag -v "$branch"
			if [ $? -ne 0 ]; then
				command_status="$EXIT_STATUS_VERIFY_TAG_FAILED"
				perror "tag verification failure"
				break
			fi
			# Output verification results in more desirable format.
			GIT_DIR="$tmp_dir/.git" git verify-tag "$branch" 2>&1
		else
			command_status="$EXIT_STATUS_VERIFY_TAG_FAILED"
			perror "tag not found"
			break
		fi
		if [ "$verbose" -ge 1 ]; then
			echo "tag verification successful"
		fi
	fi

	# Checkout the desired branch/tag.
	if [ -n "$branch" ]; then
		(chdir "$tmp_dir" &&
		  conditionally_discard_output "$discard_stdout_stderr" \
		  git checkout "$branch")
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot checkout branch/tag $branch"
			break
		fi
	fi

	# Remove the Git repository directory.
	rm -rf "$tmp_dir/.git"
	if [ $? -ne 0 ]; then
		command_status=1
		perror "cannot remove git repository directory"
		break
	fi

	case "$output_type" in
	dir)
		mkdir -p "$output_file"
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot make directory"
			break
		fi
		tar -c -f - -C "$tmp_dir" . | tar -x -f - -C "$output_file"
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot copy files"
			break
		fi
		;;
	zip)
		(chdir "$tmp_dir" && zip -q -r - .) > "$output_file"
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot create archive"
			break
		fi
		;;
	tgz)
		tar -c -z -f - -C "$tmp_dir" . > "$output_file"
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot create archive"
			break
		fi
		;;
	esac

	break

done

if [ -d "$tmp_dir" -a "$cleanup" -ne 0 ]; then
	rm -rf "$tmp_dir"
fi

exit "$command_status"
