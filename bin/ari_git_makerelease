#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

perror()
{
	eecho "ERROR: $@"
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	$(basename $0)
	Retrieves a release snapshot from Git repository.
	This retrieves the snapshot associated with a particular commit in a Git
	repository.
	The snapshot can be placed in either a directory or archive file.

	Usage
	=====

	$0 [options] repo output_file

	Options
	=======

	-D debug_level
	    Set the debug level to debug_level.
	-b branch_or_tag_name
	    Set the branch/tag to be extracted to branch_or_tag_name.
	-t output_type
	    Set the output type to output_type.
	    Allowed values: dir, zip, tgz
	-c
	    Check (i.e., verify) the signature of the tag.
	-v
	    Increase the verbosity level of output.
	EOF
	exit 2
}

user_name=$(whoami) || panic "cannot determine user"
tmp_dir_template="/tmp/ari_git_makerelease-${user_name}-XXXXXXXX"

ari_mktemp="$cmd_dir/ari_mktemp"
ari_git_isempty="$cmd_dir/ari_git_isempty"

cleanup=1
output_type=
branch=
verify_sig=0
verbose=0

while getopts D:b:ct:v option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	b)
		branch="$OPTARG";;
	t)
		output_type="$OPTARG";;
	c)
		verify_sig=1;;
	v)
		verbose=$((verbose + 1));;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage "invalid number of arguments"
fi

repo="$1"
output_file="$2"

if [ "$verify_sig" -ne 0 -a -z "$branch" ]; then
	usage "no tag specified (via -b option) and signature check requested"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$debug_level" -ge 1 ]; then
	discard_stdout=none
	discard_stderr=none
	discard_stdout_stderr=none
else
	discard_stdout=stdout
	discard_stderr=stderr
	discard_stdout_stderr=stdout_stderr
fi

if [ -z "$output_type" ]; then
	case "$output_file" in
	*.tar.gz|*.tgz)
		output_type=tgz;;
	*.zip)
		output_type=zip;;
	*)
		output_type=dir;;
	esac
fi

# Note: should we also use -L here?
if [ -e "$output_file" ]; then
	panic "output already exists $output_file"
fi

tmp_dir=$("$ari_mktemp" -d "$tmp_dir_template") || \
  panic "cannot make temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi      

# Clone the repository.
conditionally_discard_output "$discard_stdout_stderr" \
  git clone -q "$repo" "$tmp_dir" || \
  panic "cannot clone repository $repo"

# Check for an empty repository.
empty_repo="$(GIT_DIR="$tmp_dir/.git" \
  conditionally_discard_output "$discard_stderr" "$ari_git_isempty")" || \
  panic "check for empty repository failed"
if [ "$empty_repo" -ne 0 ]; then
	panic "cannot process empty repository"
fi

if [ "$verify_sig" -ne 0 ]; then

	# Check for the existence of the tag.
	GIT_DIR="$tmp_dir/.git" \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git rev-parse -q --verify "$branch"
	if [ $? -ne 0 ]; then
		tag_found=0
	else
		tag_found=1
	fi
	if [ "$tag_found" -ne 0 ]; then
		GIT_DIR="$tmp_dir/.git" \
		  conditionally_discard_output "$discard_stdout_stderr" \
		  git tag -v "$branch"
		if [ $? -ne 0 ]; then
			perror "tag verification failure"
			exit "$EXIT_STATUS_VERIFY_TAG_FAILED"
		fi
		# Output verification results in more desirable format.
		GIT_DIR="$tmp_dir/.git" git verify-tag "$branch" 2>&1
	else
		perror "tag not found"
		exit "$EXIT_STATUS_VERIFY_TAG_FAILED"
	fi
	if [ "$verbose" -ge 1 ]; then
		echo "tag verification successful"
	fi
fi

# Checkout the desired branch/tag.
if [ -n "$branch" ]; then
	(chdir "$tmp_dir" &&
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git checkout "$branch") || \
	  panic "cannot checkout branch/tag $branch"
fi

# Remove the Git repository directory.
rm -rf "$tmp_dir/.git" || \
  panic "cannot remove git repository directory"

case "$output_type" in
dir)
	mkdir -p "$output_file" || \
	  panic "cannot make directory"
	tar -c -f - -C "$tmp_dir" . | tar -x -f - -C "$output_file" || \
	  panic "cannot copy files"
	;;
zip)
	(chdir "$tmp_dir" && zip -q -r - .) > "$output_file" || \
	  panic "cannot create archive"
	;;
tgz)
	tar -c -z -f - -C "$tmp_dir" . > "$output_file" || \
	  panic "cannot create archive"
	;;
esac

exit 0
