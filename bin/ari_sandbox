#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

function panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options] command

	Options
	=======

	-d \$workspace_dir
	    Set the workspace directory to \$workspace_dir.
	-p \$package
	    Set the package to \$package.
	-k \$sandbox_type
	    Set the sandbox type to \$sandbox_type.
	    (valid values: configure, build, test, special)
	-m \$sandbox_mode
	    Set the sandbox mode to \$sandbox_mode.
	    (valid values: nop, unsafe, bwrap)
	-B \$bwrap_path
	    Set the Bubblewrap program path to \$bwrap_path.
	-D debug_level
	    Set the debug level to debug_level.
	-C \$cur_dir
	    Set the current working directory for the sandbox.
	EOF
	exit 2
}

abs_cmd_dir=$(readlink -f "$cmd_dir") || panic

ari_root_dir="$abs_cmd_dir/.."
ari_config_file="$ari_root_dir/etc/config"
ari_locate="$cmd_dir/ari_locate"
ari_tvp="$cmd_dir/ari_tvp"

################################################################################
# Process command line.
################################################################################

debug_level=${ARI_DEBUG_LEVEL:-0}
bwrap_program="$abs_cmd_dir/bwrap"
sandbox_mode=
sandbox_type=
package=
test=
project_dir=
cur_dir=

while getopts D:d:p:m:B:ut:k:C: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		project_dir="$OPTARG";;
	p)
		package="$OPTARG";;
	k)
		sandbox_type="$OPTARG";;
	t)
		test="$OPTARG";;
	m)
		sandbox_mode="$OPTARG";;
	B)
		bwrap_program="$OPTARG";;
	C)
		cur_dir="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

args=("$@")

if [ "${#args[@]}" -eq 0 ]; then
	usage "no command specified"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

# Should the following be added?
#if [ -z "$sandbox_mode" ]; then
#	if [ -n "$ARI_SANDBOX_MODE" ]; then
#		sandbox_mode="${ARI_SANDBOX_MODE}"
#	fi
#fi

if [ -z "$sandbox_type" ]; then
	if [ -z "$ARI_SANDBOX_TYPE" ]; then
		usage "no sandbox type specified"
	fi
	sandbox_type="${ARI_SANDBOX_TYPE}"
fi

if [ "$sandbox_type" != special ]; then

	if [ -z "$package" ]; then
		if [ -z "$ARI_PACKAGE" ]; then
			usage "no package specified"
		fi
		package="${ARI_PACKAGE}"
	fi

	case "$sandbox_type" in
	configure)
		;;
	build)
		;;
	test)
		if [ -z "$test" ]; then
			if [ -z "$ARI_TEST" ]; then
				usage "no test specified"
			fi
			test="${ARI_TEST}"
		fi
		;;
	*)
		;;
	esac

	if [ -z "$project_dir" ]; then
		if [ -z "$ARI_WORKSPACE_DIR" ]; then
			project_dir=$("$ari_locate" -q .) || \
			  panic "cannot determine workspace directory"
		else
			project_dir="${ARI_WORKSPACE_DIR}"
		fi
	fi

	if [ -z "$project_dir" ]; then
		usage "no workspace directory specified"
	fi
	if [ -z "$package" ]; then
		usage "no package specified"
	fi

	abs_project_dir=$(readlink -f "$project_dir") || panic
	abs_project_dir=$(ari_locate -d "$abs_project_dir") || panic
	if [ -n "$package" ]; then
		abs_package_dir="$abs_project_dir/package-$package"
		abs_derived_dir="$abs_package_dir/derived"
	fi

fi

if [ -z "$cur_dir" ]; then
	case "$sandbox_type" in
	configure|build)
		cur_dir="$abs_derived_dir"
		;;
	test)
		cur_dir="$abs_package_dir"
		;;
	special)
		# No default.
		;;
	esac
fi
if [ -n "$cur_dir" ]; then
	abs_cur_dir=$(readlink -f "$cur_dir") || \
	  panic "cannot get real path"
fi

if [ -n "${ARI_SANDBOXED+x}" ]; then
	panic "nesting of sandboxes is not supported"
fi

################################################################################
# Perform some setup.
################################################################################

if [ -z "$sandbox_mode" ]; then
	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	default_mode=($( \
	  env ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t sandbox_mode))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get default sandbox mode"
	fi
	if [ "${#default_mode[@]}" -ne 1 ]; then
		panic "invalid default sandbox mode"
	fi
	sandbox_mode="$default_mode"
fi

################################################################################
# Run sandboxed application.
################################################################################

case "$sandbox_mode" in
bwrap)

	# A sandbox is being used.
	# Set the environment variable ARI_SANDBOXED.
	export ARI_SANDBOXED=
	helper_program="$abs_cmd_dir/ari_sandbox_bwrap"

	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	helper_options=($( \
	  ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t sandbox_options))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get bwrap options"
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "bwrap options:"
		for i in "${helper_options[@]}"; do
			eecho "    $i"
		done
	fi

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application in sandbox"
		eecho "Running $bwrap_program ${bwrap_args[@]} ${args[@]}"
	fi

	helper_args=()
	if [ "$sandbox_type" != special ]; then
		helper_args+=("${helper_options[@]}")
		helper_args+=(-A "$abs_project_dir/distribution")
		helper_args+=(-A "$abs_package_dir/source")
		helper_args+=(-a "$abs_package_dir/derived")
		helper_args+=(-a "$abs_package_dir/install")
	fi
	# Note: The directory specified for the current directory
	# must exist inside the sandbox.
	if [ -z "$abs_cur_dir" ]; then
		helper_args+=(-C "$abs_cur_dir")
	fi

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running $helper_program ${helper_args[@]} ${args[@]}"
	fi
	exec "$helper_program" "${helper_args[@]}" "${args[@]}"
	exit_status=$?
	;;

nop|unsafe|*)

	# No sandbox is being used.
	# Do not set the environment variable ARI_SANDBOXED.
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application without sandbox"
	fi
	exec "${args[@]}"
	exit_status=$?
	;;

esac

exit "$exit_status"
