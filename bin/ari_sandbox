#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

function panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-D debug_level
	    Set the debug level to debug_level.
	EOF
	exit 2
}

abs_cmd_dir=$(readlink -f "$cmd_dir") || panic
cur_dir=$(pwd) || panic "cannot get current directory"
abs_cur_dir=$(readlink -f "$cur_dir") || panic

ari_root_dir="$abs_cmd_dir/.."
ari_config_file="$ari_root_dir/etc/config"
ari_locate="$cmd_dir/ari_locate"
ari_tvp="$cmd_dir/ari_tvp"

debug_level=${ARI_DEBUG_LEVEL:-0}
bwrap_program="$abs_cmd_dir/bwrap"

################################################################################
# Process command line.
################################################################################

mode=
package=
test=
type=

while getopts D:d:p:m:B:ut:k: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		project_dir="$OPTARG";;
	p)
		package="$OPTARG";;
	k)
		type="$OPTARG";;
	t)
		test="$OPTARG";;
	m)
		mode="$OPTARG";;
	B)
		bwrap_program="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

args=("$@")

if [ "${#args[@]}" -eq 0 ]; then
	panic "no command specified"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

# Should the following be added?
#if [ -z "$mode" ]; then
#	if [ -n "$ARI_SANDBOX_MODE" ]; then
#		mode="${ARI_SANDBOX_MODE}"
#	fi
#fi

if [ -z "$type" ]; then
	if [ -z "$ARI_SANDBOX_TYPE" ]; then
		usage "no sandbox type specified"
	fi
	test="${ARI_SANDBOX_TYPE}"
fi

if [ -z "$package" ]; then
	if [ -z "$ARI_PACKAGE" ]; then
		usage "no package specified"
	fi
	package="${ARI_PACKAGE}"
fi

case "$ARI_SANDBOX_TYPE" in
configure)
	;;
build)
	;;
test)
	if [ -z "$test" ]; then
		if [ -z "$ARI_TEST" ]; then
			usage "no test specified"
		fi
		test="${ARI_TEST}"
	fi
	;;
*)
	;;
esac

if [ -n "${ARI_SANDBOXED+x}" ]; then
	panic "nesting of sandboxes is not supported"
fi

if [ -z "$project_dir" ]; then
	if [ -z "$ARI_WORKSPACE_DIR" ]; then
		project_dir=$("$ari_locate" -q .) || \
		  panic "cannot determine workspace directory"
	else
		project_dir="${ARI_WORKSPACE_DIR}"
	fi
fi

if [ -z "$project_dir" ]; then
	panic "no workspace directory specified"
fi
if [ -z "$package" ]; then
	panic "no package specified"
fi

abs_project_dir=$(readlink -f "$project_dir") || panic
abs_project_dir=$(ari_locate -d "$abs_project_dir") || panic
if [ -n "$package" ]; then
	abs_package_dir="$abs_project_dir/package-$package"
fi

################################################################################
# Perform some setup.
################################################################################

if [ -z "$mode" ]; then
	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	default_mode=($( \
	  env ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t sandbox_mode))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get default sandbox mode"
	fi
	if [ "${#default_mode[@]}" -ne 1 ]; then
		panic "invalid default sandbox mode"
	fi
	mode="$default_mode"
fi

################################################################################
# Run sandboxed application.
################################################################################

case "$mode" in
bwrap)

	# A sandbox is being used.
	# Set the environment variable ARI_SANDBOXED.
	export ARI_SANDBOXED=
	helper_program="$abs_cmd_dir/ari_sandbox_bwrap"

	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	helper_options=($( \
	  ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t sandbox_options))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get bwrap options"
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "bwrap options:"
		for i in "${helper_options[@]}"; do
			eecho "    $i"
		done
	fi

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application in sandbox"
		eecho "Running $bwrap_program ${bwrap_args[@]} ${args[@]}"
	fi

	helper_args=()
	helper_args+=("${helper_options[@]}")
	helper_args+=(-A "$abs_project_dir/distribution")
	helper_args+=(-A "$abs_package_dir/source")
	helper_args+=(-a "$abs_package_dir/derived")
	helper_args+=(-a "$abs_package_dir/install")
	helper_args+=(-C "$abs_cur_dir")

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running $helper_program ${helper_args[@]} ${args[@]}"
	fi
	exec "$helper_program" "${helper_args[@]}" "${args[@]}"
	exit_status=$?
	;;

nop|unsafe|*)

	# No sandbox is being used.
	# Do not set the environment variable ARI_SANDBOXED.
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application without sandbox"
	fi
	exec "${args[@]}"
	exit_status=$?
	;;

esac

exit "$exit_status"
