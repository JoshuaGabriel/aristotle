#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

function panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

min()
{
	local x="$1"
	local y="$2"
	echo $((x < y ? x : y))
}

max()
{
	local x="$1"
	local y="$2"
	echo $((x > y ? x : y))
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-D debug_level
	    Set the debug level to debug_level.
	EOF
	exit 2
}

abs_cmd_dir=$(readlink -f "$cmd_dir") || panic
cur_dir=$(pwd) || panic "cannot get current directory"
abs_cur_dir=$(readlink -f "$cur_dir") || panic

ari_root_dir="$abs_cmd_dir/.."
ari_config_file="$ari_root_dir/etc/config"
ari_locate="$cmd_dir/ari_locate"
ari_tvp="$cmd_dir/ari_tvp"

debug_level=${ARI_DEBUG_LEVEL:-0}
bwrap_program="$abs_cmd_dir/bwrap"

################################################################################
# Process command line.
################################################################################

mode=
package="${ARI_PACKAGE}"
special=0

while getopts D:d:p:m:XB:u option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		project_dir="$OPTARG";;
	p)
		package="$OPTARG";;
	m)
		mode="$OPTARG";;
	X)
		special=1;;
	B)
		bwrap_program="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ -z "$project_dir" ]; then
	if [ -z "$ARI_WORKSPACE_DIR" ]; then
		project_dir=$("$ari_locate" -q .) || \
		  panic "cannot determine workspace directory"
	else
		project_dir="${ARI_WORKSPACE_DIR}"
	fi
fi

if [ "$special" -eq 0 ]; then
	if [ -z "$project_dir" ]; then
		panic "no workspace directory specified"
	fi
	if [ -z "$package" ]; then
		panic "no package specified"
	fi
fi

if [ "$special" -eq 0 ]; then
	abs_project_dir=$(readlink -f "$project_dir") || panic
	abs_project_dir=$(ari_locate -d "$abs_project_dir") || panic
	if [ -n "$package" ]; then
		abs_package_dir="$abs_project_dir/package-$package"
	fi
fi

args=("$@")

if [ "${#args[@]}" -eq 0 ]; then
	panic "no command specified"
fi

################################################################################
# Perform some setup.
################################################################################

user=$(whoami) || panic

sys_max_threads=$(sysctl -n kernel.threads-max) || panic
sys_max_processes=$(sysctl -n kernel.pid_max) || panic
user_cur_threads=$(ps --no-header -u $user -L | wc -l) || panic
phys_mem_size=$(awk '/MemTotal/ {print $2}' /proc/meminfo) || panic

user_max_threads=$(ulimit -u) || panic
user_max_mem=$(ulimit -m) || panic

ulimit_u1=$((2 * user_cur_threads))
ulimit_u2=$((user_cur_threads + 4096))
ulimit_u=$(max "$ulimit_u1" "$ulimit_u2") || panic
if [ "$user_max_threads" != "unlimited" ]; then
	ulimit_u=$(min "$user_max_threads" "$ulimit_u") || panic
fi

ulimit_m=$((3 * phys_mem_size / 4)) || panic
if [ "$user_max_mem" != unlimited ]; then
	ulimit_m=$(min "$user_max_mem" "$ulimit_m") || panic
fi

if [ "$debug_level" -ge 2 ]; then
	eecho "system maximum threads: $sys_max_threads"
	eecho "system maximum processes: $sys_max_processes"
	eecho "user maximum threads: $user_max_threads"
	eecho "user current threads: $user_cur_threads"
	eecho "start of configuration file"
	cat "$ari_config_file" 2>&1
	eecho "end of configuration file"
fi

if [ -z "$mode" ]; then
	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	default_mode=($( \
	  env ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t sandbox_mode))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get default sandbox mode"
	fi
	if [ "${#default_mode[@]}" -ne 1 ]; then
		panic "invalid default sandbox mode"
	fi
	mode="$default_mode"
fi

case "$mode" in
bwrap)
	# Check if the system appears to have user namespaces enabled.
	if [ -f "/proc/sys/user/max_user_namespaces" ]; then
		max_user_namespaces=$(cat /proc/sys/user/max_user_namespaces) || \
		  panic "cannot get max user namespaces"
	else
		max_user_namespaces=0
	fi
	if [ "$max_user_namespaces" -eq 0 ]; then
		panic "sandboxing is not supported"
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "maximum number of user namespaces: $max_user_namespaces"
	fi
	;;
esac

################################################################################
# Run sandboxed application.
################################################################################

if [ "$debug_level" -ge 1 ]; then
	eecho "command: ulimit -u $ulimit_u"
	eecho "command: ulimit -m $ulimit_m"
fi
ulimit -u "$ulimit_u" || panic "cannot set process limit"
ulimit -m "$ulimit_m" || panic "cannot set memory limit"

case "$mode" in
bwrap)

	saved_ifs="$IFS"
	IFS=$'\ca'
	set -f
	bwrap_options=($( \
	  ARI_ROOT_DIR="$ari_root_dir" \
	  "$ari_tvp" \
	  -i "$ari_config_file" -d "$IFS" -t bwrap_options))
	status=$?
	set +f
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get bwrap options"
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "bwrap options:"
		for i in "${bwrap_options[@]}"; do
			eecho "    $i"
		done
	fi

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application in sandbox"
		eecho "Running $bwrap_program ${bwrap_args[@]} ${args[@]}"
	fi
	bwrap_args=()
	#bwrap_args+=(--share-net)
	#bwrap_args+=(--unshare-all)
	bwrap_args+=(--unshare-user)
	#bwrap_args+=(--unshare-cgroup)
	bwrap_args+=(--die-with-parent)
	bwrap_args+=(--proc /proc)
	bwrap_args+=(--bind "/sys" "/sys")
	bwrap_args+=(--dev /dev)
	bwrap_args+=(--tmpfs /tmp)
	#bwrap_args+=(--ro-bind /usr /usr)
	bwrap_args+=(--dir /usr)
	# Note: Should the local directory be included?
	for i in bin sbin lib lib64 libexec include share; do
		target="/usr/$i"
		if [ -e "$target" ]; then
			bwrap_args+=(--ro-bind "$target" "$target")
		fi
	done
	# On some systems, /etc/alternatives contains symlinks to real programs.
	# For this reason, the directory /etc is made visible.
	bwrap_args+=(--ro-bind /etc /etc)
	bwrap_args+=(--symlink usr/bin /bin)
	bwrap_args+=(--symlink usr/sbin /sbin)
	bwrap_args+=(--symlink usr/lib64 /lib64)
	bwrap_args+=(--symlink usr/lib /lib)
	bwrap_args+=(--dir /var)
	bwrap_args+=(--symlink ../tmp var/tmp)
	###bwrap_args+=(--dir etc)
	if [ $special -eq 0 ]; then
		bwrap_args+=(--bind "$abs_project_dir/.aristotle" \
		  "$abs_project_dir/.aristotle")
		bwrap_args+=(--bind "$abs_project_dir/assignment_id" \
		  "$abs_project_dir/assignment_id")
		bwrap_args+=(--bind "$abs_project_dir/distribution" \
		  "$abs_project_dir/distribution")
		bwrap_args+=(--bind "$abs_project_dir/extras" \
		  "$abs_project_dir/extras")
		if [ -n "$package" ]; then
			for dir in install source derived; do
				bwrap_args+=(--bind "$abs_package_dir/$dir" \
				  "$abs_package_dir/$dir")
			done
		fi
	else
		bwrap_args+=(--bind "$abs_cur_dir" "$abs_cur_dir")
	fi
	#brwap_args+=(--ro-bind $(readlink -f /etc/resolv.conf) /etc/resolv.conf)
	#bwrap_args+=(--bind "$abs_project_dir" "$abs_project_dir")
	#bwrap_args+=(--chdir "$abs_project_dir")
	if [ $special -ne 0 ]; then
		bwrap_args+=(--ro-bind "$abs_cmd_dir" "$abs_cmd_dir")
		#bwrap_args+=(--chdir "$abs_cmd_dir")
	else
		bwrap_args+=(--chdir "$abs_cur_dir")
	fi
	bwrap_args+=(--setenv PS1 "sandbox$ ")
	bwrap_args+=("${bwrap_options[@]}")

#	bwrap_args+=(--file 11 /etc/passwd)
#	bwrap_args+=(--file 12 /etc/group)
#	(exec "$bwrap_program" "${bwrap_args[@]}" "${args[@]}") \
#	  11< <(getent passwd $UID 65534) \
#	  12< <(getent group $(id -g) 65534)

	if [ "$debug_level" -ge 1 ]; then
		eecho "Running $bwrap_program ${bwrap_args[@]} ${args[@]}"
	fi
	exec "$bwrap_program" "${bwrap_args[@]}" "${args[@]}"
	exit_status=$?
	;;
nop|unsafe|*)
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running application without sandbox"
	fi
	exec "${args[@]}"
	exit_status=$?
	;;
esac

exit "$exit_status"
