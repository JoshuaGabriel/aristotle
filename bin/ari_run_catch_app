#! /usr/bin/env bash

usage()
{
	echo "bad usage: $@"
	exit 2
}

panic()
{
	echo "ERROR: $@"
	exit 1
}

get_nth_last_line()
{
	local n="$1"
	shift 1
	cat "$@" | tail -n "$n" | head -n 1
}

get_nth_word()
{
	if [ $# -ne 1 ]; then
		return 1
	fi
	awk -v n="$1" '{if (n <= NF) {print $n;} else {exit 1;}}' -
}

cmd_dir=$(dirname "$0") || exit 1
ari_timeout="$cmd_dir/ari_timeout"

user="$whoami"
host=$(hostname)
tmp_dir=/tmp/ari_run_catch_app-$user@$host-$$
log_file="$tmp_dir/log_file"
debug_level=${ARI_DEBUG_LEVEL:-0}

command=
result=0
result_file="$ARI_TEST_RESULT_FILE"
timeout=

while getopts D:c:rt: opt; do
	case $opt in
	c)
		command="$OPTARG";;
	t)
		timeout="$OPTARG";;
	r)
		result=1;;
	D)
		debug_level="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ "$result" -ne 0 ]; then
	if [ -z "$result_file" ]; then
		panic "no result file specified"
	fi
fi

mkdir -p "$tmp_dir" || panic "cannot make directory $tmp_dir"

if [ -n "$timeout" ]; then
	"$ari_timeout" -t "$timeout" -k 10 "$command" -r console > "$log_file" 2> /dev/null
	status=$?
else
	"$command" -r console > "$log_file" 2> /dev/null
	status=$?
fi

completed=1
if [ "$status" -ne 0 ]; then
	if [ "$status" -ge 128 ]; then
		completed=0
	fi
	buffer=$(get_nth_last_line 3 "$log_file")
	total_tests=$(echo "$buffer" | get_nth_word 3) || \
	  panic "cannot get total tests"
	passed_tests=$(echo "$buffer" | get_nth_word 5) || \
	  panic "cannot get passed tests"
	failed_tests=$(echo "$buffer" | get_nth_word 8) || \
	  panic "cannot get failed tests"
	buffer=$(get_nth_last_line 2 "$log_file")
	total_assertions=$(echo "$buffer" | get_nth_word 2) || \
	  panic "cannot get total assertions"
	passed_assertions=$(echo "$buffer" | get_nth_word 4) || \
	  panic "cannot get passed assertions"
	failed_assertions=$(echo "$buffer" | get_nth_word 7) || \
	  panic "cannot get failed assertions"

	#eecho "total tests $total_tests"
	#eecho "passed tests $passed_tests"
	#eecho "failed tests $failed_tests"
	#eecho "total assertions $total_assertions"
	#eecho "passed assertions $passed_assertions"
	#eecho "failed assertions $failed_assertions"
	if [ "$completed" -eq 0 ]; then
		result_message="FAIL,$failed_assertions/$total_assertions,$failed_tests/$total_tests"
	else
		result_message="INC,$failed_assertions/$total_assertions,$failed_tests/$total_tests"
	fi
else
	buffer=$(get_nth_last_line 2 "$log_file" | tr '()' '  ')
	total_assertions=$(echo "$buffer" | get_nth_word 4) || \
	  panic "cannot get total assertions"
	total_tests=$(echo "$buffer" | get_nth_word 7) || \
	  panic "cannot get total tests"
	result_message="PASS,0/$total_assertions,0/$total_tests"
fi

if [ "$result" -ne 0 ]; then
	echo "$result_message" > "$result_file" || \
	  panic "cannot create result file"
fi

cat "$log_file" || panic "cannot copy log file"
echo "SUMMARY OF TEST APPLICATION RESULTS:"
if [ "$status" -ne 0 ]; then
	if [ "$completed" -eq 1 ]; then
		completed_message="complete"
	else
		completed_message="incomplete"
	fi
	cat <<- EOF
	failed assertions: $failed_assertions/$total_assertions ($complete)"
	failed tests: $failed_tests/$total_tests ($complete)"
	status: fail ($completed_message)"
	EOF
else
	cat <<- EOF
	failed assertions: 0/$total_assertions
	failed tests: 0/$total_tests
	status: pass
	EOF
fi

rm -f "$log_file"
rmdir "$tmp_dir"

if [ "$status" -ne 0 ]; then
	exit 1
else
	exit 0
fi
