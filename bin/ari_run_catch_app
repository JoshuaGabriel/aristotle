#! /usr/bin/env bash

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

usage()
{
	echo "$@"
	cat <<- EOF
	usage:
	$0 [options]

	options:
	-c \$command
	    Set the program to run to \$command.
	-t \$timeout
	    Set the timeout to \$timeout.
	-r
	    Enable the saving of the results.
	-D \$debug_level
	    Set the debug level to \$debug_level.

	exit status:
	0 ... Catch2 application ran to completion and all tests passed
	1 ... Catch2 application ran to completion but some tests failed
	2 ... Catch2 application did not run to completion
	3 ... other fatal error
	4 ... bad usage
	EOF
	exit 4
}

panic()
{
	echo "ERROR: $@"
	exit 3
}

get_nth_last_line()
{
	local n="$1"
	shift 1
	cat "$@" | tail -n "$n" | head -n 1
}

get_nth_word()
{
	if [ $# -ne 1 ]; then
		return 1
	fi
	awk -v n="$1" '{if (n <= NF) {print $n;} else {exit 1;}}' -
}

ari_timeout="$cmd_dir/ari_timeout"

user="$whoami"
host=$(hostname)
tmp_dir=/tmp/ari_run_catch_app-$user@$host-$$
log_file="$tmp_dir/log_file"
debug_level=${ARI_DEBUG_LEVEL:-0}

command=
result=0
result_file="$ARI_TEST_RESULT_FILE"
timeout=

while getopts D:c:rt:f: opt; do
	case $opt in
	c)
		command="$OPTARG";;
	t)
		timeout="$OPTARG";;
	r)
		result=1;;
	f)
		result=1; result_file="$OPTARG";;
	D)
		debug_level="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ "$result" -ne 0 ]; then
	if [ -z "$result_file" ]; then
		panic "no result file specified"
	fi
fi

if [ -z "$command" ]; then
	panic "no command specified"
fi

mkdir -p "$tmp_dir" || panic "cannot make directory $tmp_dir"

# A Catch2 application should generate output like the following:
# All available test cases:
# [1 line per test case]
# 10 test cases
# [blank line]
buffer=$("$command" -r console -l 2> /dev/null | get_nth_last_line 2)
echo "$buffer" | grep -q -e '[0-9]\+.\+test cases' || \
  panic "invalid output generated by Catch2 application"
num_test_cases=$(echo "$buffer" | get_nth_word 1) || \
  panic "cannot extract number of test cases"
if [ "$num_test_cases" -ge 128 ]; then
	eecho "since more than 127 test cases, cannot rely on Catch2 app exit status"
fi

if [ -n "$timeout" ]; then
	"$ari_timeout" -t "$timeout" -k 10 "$command" -r console \
	  > "$log_file" 2> /dev/null
	app_exit_status=$?
else
	"$command" -r console > "$log_file" 2> /dev/null
	app_exit_status=$?
fi

completed=1
if [ "$app_exit_status" -ne 0 ]; then
	# If any tests fail, the output should resemble:
	# test cases:  6 |  5 passed | 1 failed
	# assertions: 84 | 80 passed | 4 failed
	# [blank line]
	if [ "$num_test_cases" -lt 128 -a "$app_exit_status" -ge 128 ]; then
		completed=0
	fi
	test_cases_buffer=$(get_nth_last_line 3 "$log_file") || \
	  panic "cannot get test cases line"
	assertions_buffer=$(get_nth_last_line 2 "$log_file") || \
	  panic "cannot get assertions line"
	valid_result=1
	echo "$test_cases_buffer" | grep -q \
	  -e '^test cases:[[:space:]]\+[0-9]*[[:space:]]\+|[[:space:]]\+[0-9]*[[:space:]]\+passed[[:space:]]\+|[[:space:]]\+[0-9]*[[:space:]]\+failed$' || \
	  valid_result=0
	echo "$assertions_buffer" | grep -q \
	  -e '^assertions:[[:space:]]\+[0-9]*[[:space:]]\+|[[:space:]]\+[0-9]*[[:space:]]\+passed[[:space:]]\+|[[:space:]]\+[0-9]*[[:space:]]\+failed$' || \
	  valid_result=0
	if [ "$valid_result" -ne 0 ]; then
		total_tests=$(echo "$test_cases_buffer" | get_nth_word 3) || \
		  panic "cannot get total tests"
		passed_tests=$(echo "$test_cases_buffer" | get_nth_word 5) || \
		  panic "cannot get passed tests"
		failed_tests=$(echo "$test_cases_buffer" | get_nth_word 8) || \
		  panic "cannot get failed tests"
		total_assertions=$(echo "$assertions_buffer" | get_nth_word 2) || \
		  panic "cannot get total assertions"
		passed_assertions=$(echo "$assertions_buffer" | get_nth_word 4) || \
		  panic "cannot get passed assertions"
		failed_assertions=$(echo "$assertions_buffer" | get_nth_word 7) || \
		  panic "cannot get failed assertions"
		if [ "$total_tests" -lt "$num_test_cases" ]; then
			completed=0
		fi
	else
		completed=0
		total_tests="?"
		passed_tests="?"
		failed_tests="?"
		total_assertions="?"
		passed_assertions="?"
		failed_assertions="?"
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "total tests $total_tests"
		eecho "passed tests $passed_tests"
		eecho "failed tests $failed_tests"
		eecho "total assertions $total_assertions"
		eecho "passed assertions $passed_assertions"
		eecho "failed assertions $failed_assertions"
	fi
	if [ "$completed" -eq 1 ]; then
		result_message="COM,$failed_assertions/$total_assertions,$failed_tests/$total_tests"
	else
		result_message="INC,$failed_assertions/$total_assertions,$failed_tests/$total_tests"
	fi
else
	# If all tests pass, then the output should resemble:
	# All tests passed (723 assertions in 22 test cases)
	# [blank line]
	buffer=$(get_nth_last_line 2 "$log_file") || \
	  panic "cannot get status line"
	valid_result=1
	echo "$buffer" | grep -q \
	  -e '^All tests passed ([0-9]*[[:space:]]\+assertions in[[:space:]]\+[0-9]*[[:space:]]\+test cases)$' || \
	  valid_result=0
	if [ "$valid_result" -ne 0 ]; then
		buffer=$(echo "$buffer" | tr '()' '  ')
		total_assertions=$(echo "$buffer" | get_nth_word 4) || \
		  panic "cannot get total assertions"
		total_tests=$(echo "$buffer" | get_nth_word 7) || \
		  panic "cannot get total tests"
		result_message="PASS,0/$total_assertions,0/$total_tests"
	fi
fi

if [ "$result" -ne 0 ]; then
	echo "$result_message" > "$result_file" || \
	  panic "cannot create result file"
fi

cat "$log_file" || panic "cannot copy log file"
echo "SUMMARY OF TEST APPLICATION RESULTS:"
if [ "$app_exit_status" -ne 0 ]; then
	if [ "$completed" -eq 1 ]; then
		completed_message="complete"
		exit_status=1
	else
		completed_message="incomplete"
		exit_status=2
	fi
	cat <<- EOF
	failed assertions: $failed_assertions/$total_assertions ($completed_message)
	failed tests: $failed_tests/$total_tests ($completed_message)
	status: fail ($completed_message)
	EOF
else
	cat <<- EOF
	failed assertions: 0/$total_assertions
	failed tests: 0/$total_tests
	status: pass
	EOF
	exit_status=0
fi

rm -f "$log_file"
rmdir "$tmp_dir"

exit "$exit_status"
