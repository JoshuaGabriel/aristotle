#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2019 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

eecho()
{
	echo "$@" 1>&2
}

panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

print_status()
{
	local package
	local operation
	local target
	local status
	if [ $# -eq 4 ]; then
		package="$1"
		operation="$2"
		target="$3"
		status="$4"
#		case "$status" in
#		0|1)
#			status="COM or OK";;
#		3)
#			status="INC";;
#		*)
#			status="UNK";;
#		esac
	else
		package="Package"
		operation="Operation"
		target="Target"
		status="Status"
	fi
	printf "%-16.16s %-9.9s %-16.16s %-s\n" \
	  "$package" "$operation" "$target" "$status"
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage:
	$0 [options]

	options:
	-d \$work_dir
	-r \$repo_regex
	-o \$organization

	examples:
	$0 -d dostat -o uvic-seng475 -r 'tools-.*'
	EOF
	exit 2
}

cmd_dir=$(dirname "$0") || panic "cannot get command directory"
cmd_dir=$(realpath "$cmd_dir") || panic
ari_hub="$cmd_dir/ari_hub"
ari_info="$cmd_dir/ari_info"

debug_level="${ARI_DEBUG_LEVEL:-0}"
organization=
repo_regex=".*"
package_regex=".*"
work_dir=
branch=master
enable_issues=1

while getopts D:r:p:o:d:n option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		work_dir="$OPTARG";;
	r)
		repo_regex="$OPTARG";;
	p)
		package_regex="$OPTARG";;
	o)
		organization="$OPTARG";;
	n)
		enable_issues=0;;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$work_dir" ]; then
	usage "no work directory specified"
fi
if [ -z "$organization" ]; then
	usage "no organization specified"
fi
if [ -z "$repo_regex" ]; then
	usage "no repositories specified"
fi
if [ -z "$package_regex" ]; then
	usage "no packages specified"
fi

work_dir=$(realpath "$work_dir") || panic

for dir in "$work_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory"
	fi
done

first=1

iter_no=0
while true; do


	cat <<- EOF
	############################################################
	Iteration: $iter_no
	############################################################
	EOF

	repo_names=($(ari_gc_lsrepo -o "$organization" | \
	  grep -E '^'"$repo_regex"'$')) || \
	  panic "cannot get list of repositories"
	eecho "number of repositories: ${#repo_names[@]}"
	eecho "repositories:"
	for repo_name in "${repo_names[@]}"; do
		eecho "    $repo_name"
	done

	for repo_name in "${repo_names[@]}"; do

		skip=0

		repo_url="ssh://git@github.com/$organization/$repo_name.git"
		#repo_url="https://github.com/$organization/$repo_name.git"
		item_dir="$work_dir/$repo_name"
		old_commit_id_file="$item_dir/commit_id"
		workspace_dir="$item_dir/workspace"
		repo_dir="$item_dir/repository"
		commit_id_file="$workspace_dir/commit_id"
		issue_dir="$item_dir/issues"
		tmp_file="$workspace_dir/tmp_file"
		time="$(date +%Y-%m-%d-%H-%M-%S)" || panic "cannot get time"
		issue_file="$issue_dir/issue-$time"

		cat <<- EOF
		############################################################
		Processing $repo_name
		############################################################
		EOF

		for dir in "$item_dir" "$issue_dir"; do
			if [ ! -d "$dir" ]; then
				mkdir -p "$dir" || \
				  panic "cannot make directory $dir"
			fi
		done

		for dir in "$repo_dir" "$workspace_dir"; do
			if [ -d "$dir" ]; then
				rm -rf "$dir" || panic "cannot remove directory $dir"
			fi
			mkdir -p "$dir" || \
			  panic "cannot make directory $dir"
		done

		git clone -q "$repo_url" "$repo_dir" || \
		  panic "cannot clone repository $repo_url"

		# Check for an empty repository.
		test -n "$(GIT_DIR="$repo_dir/.git" git rev-list -n 1 --all)"
		if [ $? -ne 0 ]; then
			empty_repo=1
		else
			empty_repo=0
		fi
		if [ "$empty_repo" -ne 0 ]; then
			eecho "warning: skipping empty repository"
			skip=1
		fi

		if [ "$skip" -eq 0 ]; then

			(cd "$repo_dir" && git checkout -q "$branch") || \
			  panic "cannot checkout"
			ari_import1 -v -t git_working_tree -i "$repo_dir" \
			  -d "$workspace_dir"
			status=$?
			if [ "$status" -ne 0 ]; then
				eecho "warning: skipping $repo_name due to import failure"
				skip=1
			fi

		fi

		if [ "$skip" -eq 0 ]; then

			project="$(cat "$workspace_dir/assignment_id")" || panic

			if [ -f "$old_commit_id_file" ]; then
				old_commit_id="$(cat "$old_commit_id_file")" || \
				  panic "cannot get commit ID"
			else
				old_commit_id=
			fi
			commit_id="$(cat "$commit_id_file")" || \
			  panic "cannot get commit ID"
			if [ -z "$commit_id" ]; then
				panic "bad commit ID"
			fi

			if [ "$debug_level" -ge 1 ]; then
				eecho "old commit ID: $old_commit_id"
				eecho "new commit ID: $commit_id"
			fi
			if [ -n "$old_commit_id" -a "$old_commit_id" = "$commit_id" ]; then
				eecho "repository unchanged"
				skip=1
			fi

		fi

		if [ "$skip" -eq 0 ]; then

			ari_process -v "$workspace_dir"
			status=$?

			packages=($("$ari_info" -a "$project" packages)) || \
			  panic "cannot get package list"

			#packages=($((cd "$workspace_dir" && \
			#  find . -mindepth 1 -maxdepth 1 -name 'package-*' \
			#  -type d -print) | sed -e 's/^\.\/package-//'))

			if [ "$debug_level" -ge 1 ]; then
				eecho "packages:"
				for i in "${packages[@]}"; do
					eecho "    $i"
				done
			fi

			printf "" > "$tmp_file" || panic
			printf "%s\n\n" "Status: Commit $commit_id" >> "$tmp_file" || \
			  panic

			printf "Commit ID: $commit_id\n" >> "$tmp_file" || \
			  panic
#			printf "\n" >> "$tmp_file" || \
#			  panic
#			cat >> "$tmp_file" <<- EOF
#			Commit ID: $commit_id
#
#			The following status values are possible:
#			 * OK: no errors
#			 * COM: at least one failure; operation completed
#			 * INC: operation did not complete
#			 * UNK: unknown error occurred
#
#			EOF
#			[ $? -ne 0 ] || panic
			printf "<pre>\n" >> "$tmp_file" || \
			  panic
			print_status >> "$tmp_file" || \
			  panic
			for package in "${packages[@]}"; do
				package_dir="$workspace_dir/package-$package"
				build_targets=($("$ari_info" \
				  -a "$project" "package-$package/builds")) || \
				  panic "cannot get build targets"
				test_targets=($("$ari_info" \
				  -a "$project" "package-$package/tests")) || \
				  panic "cannot get test targets"
				status_file="$package_dir/configure/status"
				if [ -f "$status_file" ]; then
					status="$(cat "$status_file")"
				else
					status=
				fi
				print_status \
				  "$package" "configure" "---" "$status" >> "$tmp_file" || \
				  panic
				for target in "${build_targets[@]}"; do
					status_file="$package_dir/build-$target/status"
					if [ -f "$status_file" ]; then
						status="$(cat "$status_file")"
					else
						status=
					fi
					print_status \
					  "$package" "build" "$target" "$status" >> "$tmp_file" || \
					  panic
				done
				for target in "${test_targets[@]}"; do
					status_file="$package_dir/test-$target/status"
					if [ -f "$status_file" ]; then
						status="$(cat "$status_file")"
					else
						status=
					fi
					print_status \
					  "$package" "test" "$target" "$status" >> "$tmp_file" || \
					  panic
				done
			done
			printf "</pre>\n" >> "$tmp_file" || \
			  panic
			message="$(cat "$tmp_file")" || panic "cat failed"
			eecho "##########"
			eecho "$message"
			eecho "##########"

			cp "$tmp_file" "$issue_file" || panic

			if [ "$enable_issues" -ne 0 ]; then
				issue_url="$( (cd "$repo_dir" && \
				  "$ari_hub" issue create -m "$message") )"
			fi

			echo "$commit_id" > "$old_commit_id_file" || panic

		fi

		if [ "$first" -eq 0 ]; then
			eecho "sleeping"
			sleep 10
		fi
	done

	first=0
	iter_no=$((iter_no + 1))

done
