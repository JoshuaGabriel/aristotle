#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	$(basename $0)
	Login to GitHub.

	Usage
	=====

	$0 [options]

	Options
	=======

	-D debug_level
	    Set the debug level to debug_level.
	-u user_name
	    Set the user name to user_name.
	-t \$token_file
	    Sets the file from which to read the GitHub personal-access token
	    (PAT) as \$token_file.
	    A value of "-" means standard input.
	EOF
	exit 2
}

user_config_dir="$HOME/.aristotle"
gc_username_file="$user_config_dir/gc_username"
gc_token_file="$user_config_dir/gc_token"

user_name=$(whoami) || panic "cannot get user name"

debug_level="${ARI_DEBUG_LEVEL:-0}"
gc_user=
use_token=1
token_file=

while getopts D:u:t: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	u)
		gc_user="$OPTARG";;
	t)
		token_file="$OPTARG";;
	\?)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

#if [ -z "$token_file" ]; then
#	usage "no token file specified"
#fi

if [ -n "$token_file" ]; then
	if [ "$token_file" = "-" ]; then
		gc_token="$(cat)" || \
		  panic "cannot get token"
	else
		gc_token="$(cat "$token_file")" || \
		  panic "cannot get token"
else
	gc_token=
fi

umask 077

if [ ! -d "$user_config_dir" ]; then
	mkdir -p "$user_config_dir" || \
	  panic "cannot make directory $user_config_dir"
	chmod g-rwx,o-rwx "$user_config_dir" || \
	  panic "cannot set permissions for directory $user_config_dir"
fi
for file in "$gc_username_file" "$gc_token_file"; do
	if [ -f "$file" ]; then
		rm "$file" || panic "cannot remove file $file"
	fi
done

if [ -n "$gc_user" ]; then
	cat >"$gc_username_file" <<< "$gc_user" || \
	  panic "cannot create gc_username file"
fi
if [ -n "$gc_token" ]; then
	cat > "$gc_token_file" <<< "$gc_token" || \
	  panic "cannot create gc_token file"
	# This following is just a failsafe (in case the umask is set wrong.
	chmod g-rwx,o-rwx "$gc_token_file" || \
	  panic "cannot set permissions for file $gc_token_file"
fi
