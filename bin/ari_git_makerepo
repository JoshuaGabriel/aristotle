#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

perror()
{
	echo "ERROR: $@"
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	$(basename $0)
	This program replaces the contents of a Git repository with some specific
	content, which is provided in a directory or archive file.
	It is strongly recommended that the target repository be empty in order to
	minimize the chance of failure.

	Remarks Concerning GitHub
	=========================

	When a commit is made to an empty repository, GitHub must set the default
	branch.  If the initial commit contains multiple branches, GitHub appears
	to choose the branch whose name comes first in alphabetical order as the
	default branch.  This choice, in many cases, will not be master or main or
	many of the popular names for the primary branch in a repository.  So, the
	default branch may need to be set for the target repository (using the
	interfaces provided by GitHub) after being created.

	If the target repository is hosted by GitHub, it should be empty.
	The operation may still succeed if the target repository is not empty.
	Problems will arise, however, if the GitHub's setting for the default
	branch is not one of the branches in the source repository.  GitHub
	will refuse to delete the branch that it considers the default branch.

	Usage
	=====

	$0 [options] input_file output_repo

	Options
	=======

	-D debug_level
	    Set the debug level to debug_level.
	-t input_type
	    Set the input type to input_type.
	    Allowed values: dir, zip, tgz
	-v
	    Increase the verbosity level of output.
	-C
	    Disable cleanup.
	EOF
	exit 2
}

user_name=$(whoami) || panic "cannot determine user"
tmp_dir_template="${ARI_TMPDIR:-/tmp}/ari_git_makerepo-${user_name}-XXXXXXXX"

ari_mktemp="$cmd_dir/ari_mktemp"

verbose=0
cleanup=1
debug_level=0
input_type=

while getopts CD:t:v option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	t)
		input_type="$OPTARG"
		case "$input_type" in
		zip|tar|tgz|bare_git_dir)
			;;
		*)
			usage;;
		esac
		;;
	v)
		verbose=$((verbose + 1));;
	C)
		cleanup=0;;
	\?)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage "incorrect number of arguments specified"
fi

input="$1"
repo_url="$2"

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$debug_level" -ge 1 ]; then
	discard_stdout=none
	discard_stderr=none
	discard_stdout_stderr=none
else
	discard_stdout=stdout
	discard_stderr=stderr
	discard_stdout_stderr=stdout_stderr
fi

#if [ "$input_type" = bare_git_dir ]; then
#	"$ari_git_copyrepo" -r "$input" "$repo_url" || panic
#	exit
#fi

# Determine the input type, if necessary.
if [ -z "$input_type" ]; then
	if [ -d "$input" ]; then
		if [ -d "$input/branches" -a -d "$input/objects" -a \
		  -d "$input/refs" ]; then
			input_type=bare_git_dir
		else
			input_type=dir
		fi
	fi
	case "$input_type" in
	*.zip)
		input_type=zip;;
	*.tgz|*.tar.gz)
		input_type=tgz;;
	esac
	if [ -z "$input_type" ]; then
		panic "could not determine input type"
	fi
fi

if [ "$debug_level" -ge 1 ]; then
	echo "input type: $input_type"
fi

tmp_dir=$("$ari_mktemp" -d "$tmp_dir_template") || \
  panic "cannot make temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

if [ "$debug_level" -ge 1 ]; then
	echo "temporary directory: $tmp_dir"
fi

case "$input_type" in

bare_git_dir)
	bare_dir="$input"
	;;

*)
	bare_dir="$tmp_dir/repo.git"
	normal_dir="$tmp_dir/repo"

	for dir in "$bare_dir" "$normal_dir"; do
		mkdir -p "$dir" || \
		  panic "cannot make directory $dir"
	done

	if [ "$verbose" -ge 2 ]; then
		echo "Building temporary repository $bare_dir"
	fi
	(chdir "$bare_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git init --bare .) || \
	  panic "cannot create bare repository"
	(chdir "$normal_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git clone "$bare_dir" .) || \
	  panic "cannot clone bare repository"

	case "$input_type" in
	dir)
		if [ "$verbose" -ge 2 ]; then
			ls -alR "$input"
		fi
		tar -C "$input" -cf - . | tar -C "$normal_dir" -xf - || \
		  panic "cannot copy files"
		;;
	zip)
		unzip -q -d "$normal_dir" "$input" || \
		  panic "cannot extract files from zip archive"
		;;
	tgz)
		tar -x -z -f "$input" -C "$normal_dir" || \
		  panic "cannot extract files from tar archive"
		;;
	*)
		panic "unknown input type"
		;;
	esac

	(chdir "$normal_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git add .) || \
	  panic "cannot add files to repository"
	(chdir "$normal_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git commit -m "Initial commit") || \
	  panic "cannot commit changes"
	(chdir "$normal_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git config --local push.default simple) || \
	  panic "cannot set push.default"
	(chdir "$normal_dir" && \
	  conditionally_discard_output "$discard_stdout_stderr" \
	  git push) || \
	  panic "cannot push changes"
	;;

esac

if [ "$verbose" -ge 2 ]; then
	echo "Copying temporary repository to target repository $repo_url"
fi
GIT_DIR="$bare_dir" \
  conditionally_discard_output "$discard_stdout_stderr" \
  git push --mirror "$repo_url" || \
  panic "cannot push to target repository $repo_url"

exit 0
