#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
abs_cmd_dir=$(readlink -f "$cmd_dir") || exit 1
source "$cmd_dir/utilities" || exit 1

example_dir="$cmd_dir/../etc/examples"
assignments_dir="$cmd_dir/../etc/assignments"
export ARI_ASSIGNMENTS_DIR="$assignments_dir"

ari_import="$cmd_dir/ari_import"
ari_precheck="$cmd_dir/ari_precheck"
ari_process="$cmd_dir/ari_process"

usage()
{
	cat <<- EOF
	Usage:
	$0 [options]

	Options:
	-p pdf_viewer
	    Set the PDF viewer program to pdf_viewer.
	-d output_directory
	    Set the output directory to output_directory.
	EOF
	exit 2
}

default_pdf_viewer=xpdf
dir=
debug_level=0

while getopts D:d:p: option; do
	case "$option" in
	p)
		default_pdf_viewer="$OPTARG";;
	d)
		dir=$((verbose + 1));;
	D)
		debug_level="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$dir" ]; then
	dir=$(pwd) || panic
fi

pdf_viewer=$(type -P "$default_pdf_viewer")
if [ $? -ne 0 ]; then
	echo "cannot find PDF viewer $default_pdf_viewer"
	echo "try specifying the viewer with the -p option"
	panic "PDF viewer not found"
fi

work_dir="$dir/aristotle_demo"

mkdir -p "$work_dir" || panic "cannot make directory $work_dir"

command=("$ari_precheck" -D "$debug_level"
  -v -F -p "$work_dir/precheck/" -t directory "$example_dir/"palindrome*)
cat <<- EOF
################################################################################
Running the command:
${command[@]}
################################################################################
EOF
"${command[@]}" || panic "${command[0]} failed"

cat <<- EOF
################################################################################
Showing report generated by ari_precheck (with PDF viewer $pdf_viewer)
################################################################################
EOF
for file in $work_dir/precheck/palindrome-*/report.pdf; do
	"$pdf_viewer" "$file"
done

command=("$ari_import" -D "$debug_level"
  -p "$work_dir/assignments/" -t directory "$example_dir/"palindrome*)
cat <<- EOF
################################################################################
Running the command:
${command[@]}
################################################################################
EOF
"${command[@]}" || panic "${command[0]} failed"

command=("$ari_process" -D "$debug_level" "$work_dir/assignments/"*)
cat <<- EOF
################################################################################
Running the command:
${command[@]}
################################################################################
EOF
"${command[@]}" || panic "${command[0]} failed"

cat <<- EOF
################################################################################
Showing report generated by ari_process (with PDF viewer $pdf_viewer)
################################################################################
EOF
for file in $work_dir/assignments/palindrome-*/report.pdf; do
	"$pdf_viewer" "$file"
done

