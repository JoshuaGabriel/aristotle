#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
abs_cmd_dir=$(readlink -f "$cmd_dir") || exit 1
source "$cmd_dir/utilities" || exit 1

example_dir="$cmd_dir/../etc/examples"
assignment_dir="$cmd_dir/../etc/assignments"

ari_import="$cmd_dir/ari_import"
ari_precheck="$cmd_dir/ari_precheck"
ari_process="$cmd_dir/ari_process"

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options]

	Options
	=======

	-p pdf_viewer
	    Set the PDF viewer program to pdf_viewer.
	-d output_directory
	    Set the output directory to output_directory.
	-D debug_level
	    Set the debug level to debug_level.
	-R
	    Do not view the generated reports.
	-n demo_name
	    Specify which demonstrations to run.
	    The default is to run all demonstrations.
	    Valid values: ${all_names[@]}
	EOF
	exit 2
}

all_names=()
all_names+=(palindrome)
all_names+=(hello_nif)
all_names+=(hello_make)
all_names+=(hello_cmake)

default_pdf_viewer=xpdf
dir=
debug_level=0
names=()
view_report=1

while getopts D:d:p:n:R option; do
	case "$option" in
	p)
		default_pdf_viewer="$OPTARG";;
	d)
		dir=$((verbose + 1));;
	D)
		debug_level="$OPTARG";;
	n)
		names+=("$OPTARG");;
	R)
		view_report=0;;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$dir" ]; then
	dir=$(pwd) || panic
fi

pdf_viewer=$(type -P "$default_pdf_viewer")
if [ $? -ne 0 ]; then
	echo "cannot find PDF viewer $default_pdf_viewer"
	echo "try specifying the viewer with the -p option"
	panic "PDF viewer not found"
fi

if [ "${#names[@]}" -eq 0 ]; then
	names=("${all_names[@]}")
fi

for name in "${names[@]}"; do

	work_dir="$dir/aristotle_demo/$name"

	mkdir -p "$work_dir" || panic "cannot make directory $work_dir"

	echo "Setting ARI_ASSIGNMENT_PATH to $assignment_dir"
	export ARI_ASSIGNMENT_PATH="$assignment_dir"

	case "$name" in
	hello_nif)
		export ARI_GET_ASSIGNMENT="$assignment_dir/../public/bin/get_assignment"
		echo "Setting ARI_GET_ASSIGNMENT to $ARI_GET_ASSIGNMENT"
		;;
	*)
		unset ARI_GET_ASSIGNMENT
		echo "Clearing ARI_GET_ASSIGNMENT"
		;;
	esac

	command=("$ari_precheck" -D "$debug_level"
	  -v -p "$work_dir/precheck/" -t directory \
	  "$example_dir/"$name-*)
	cat <<- EOF
	################################################################################
	Running the command:
	${command[@]}
	################################################################################
	EOF
	"${command[@]}" || panic "${command[0]} failed"

	if [ "$view_report" -ne 0 ]; then
		cat <<- EOF
		################################################################################
		Showing report generated by ari_precheck (with PDF viewer $pdf_viewer)
		################################################################################
		EOF
		for file in $work_dir/precheck/$name-*/report.pdf; do
			echo "Running PDF viewer for $file"
			if [ ! -f "$file" ]; then
				panic "cannot find file $file"
			fi
			"$pdf_viewer" "$file"
		done
	fi

	command=("$ari_import" -D "$debug_level"
	  -p "$work_dir/assignments/" -t directory "$example_dir/"$name*)
	cat <<- EOF
	################################################################################
	Running the command:
	${command[@]}
	################################################################################
	EOF
	"${command[@]}" || panic "${command[0]} failed"

	command=("$ari_process" -D "$debug_level" "$work_dir/assignments/"*)
	cat <<- EOF
	################################################################################
	Running the command:
	${command[@]}
	################################################################################
	EOF
	"${command[@]}" || panic "${command[0]} failed"

	if [ "$view_report" -ne 0 ]; then
		cat <<- EOF
		################################################################################
		Showing report generated by ari_process (with PDF viewer $pdf_viewer)
		################################################################################
		EOF
		for file in $work_dir/assignments/$name-*/report.pdf; do
			"$pdf_viewer" "$file"
		done
	fi

done
