#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir="$(dirname "$0")" || exit 1
source "$cmd_dir/utilities" || exit 1

perror()
{
	echo "ERROR: $@"
}

perform_cleanup()
{
	if [ -n "$tmp_org_name" -a -n "$tmp_repo_name" ]; then
		eecho "deleting partially constructed repository $tmp_org_name $tmp_repo_name"
		"$ari_gc_deleterepo" -o "$tmp_org_name" "$tmp_repo_name" 2> /dev/null
		if [ $? -ne 0 ]; then
			eecho "warning: cannot delete partially constructed repository"
		fi
	fi
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	$(basename $0)
	Create a new Git repository on GitHub and populate the repository
	with particular content.
	A repository is created for each input source.

	Usage
	=====

	$0 [options] [input...]

	Options
	=======

	-D debug_level
	    Set the debug level to debug_level.
	-o org_name
	    Set the organization to org_name.
	-t input_type
	    Set the input type to input_type.
	    Allowed values: dir, zip, tgz
	-v
	    Increase the verbosity level of output.
	-q
	    Decrease the verbosity level of output.
	EOF
	exit 2
}

ari_gc_createrepo="$cmd_dir/ari_gc_createrepo"
ari_gc_deleterepo="$cmd_dir/ari_gc_deleterepo"
ari_git_makerepo="$cmd_dir/ari_git_makerepo"
ari_gc_getcred="$cmd_dir/ari_gc_getcred"
ari_gc_giturl="$cmd_dir/ari_gc_giturl"

verbose=0
org_name=
debug_level=0
input_type=
git_proto="$("$ari_gc_getcred" -k gc_git_protocol)" || git_proto=https
repo=

while getopts D:o:vqt:g:n: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	n)
		repo="$OPTARG";;
	g)
		case "$OPTARG" in
		http|https|ssh)
			;;
		*)
			usage "invalid Git protocol"
			;;
		esac
		git_proto="$OPTARG"
		;;
	o)
		org_name="$OPTARG";;
	t)
		input_type="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	q)
		verbose=$((verbose - 1));;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

inputs=("$@")

if [ -z "$org_name" ]; then
	usage "no organization specified"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ -n "$repo" -a ${#inputs[@]} -gt 1 ]; then
	usage "cannot specify repository name when multiple inputs"
fi

failures=()

tmp_org_name=
tmp_repo_name=
trap perform_cleanup EXIT

for input in "${inputs[@]}"; do

	if [ "${#inputs[@]}" -ge 2 -a "$verbose" -ge 1 ]; then
		echo "Processing input $input"
	fi

	if [ -z "$input_type" ]; then
		if [ -d "$input" ]; then
			if [ -d "$input/branches" -a -d "$input/objects" -a \
			  -d "$input/tags" ]; then
				input_type=bare_git_dir
			else
				input_type=dir
			fi
		fi
		case "$input" in
		*.zip)
			input_type=zip
			;;
		*.tgz)
			input_type=tgz
			;;
		*.tar.gz)
			input_type=tgz
			;;
		esac
	fi

	if [ -z "$input_type" ]; then
		failures+=("$input")
		perror "cannot determine input type"
		continue
	fi

	case "$input_type" in
	bare_git_dir)
		extension=git
		;;
	tgz)
		case "$input" in
		*.tgz)
			extension=tgz;;
		*.tar.gz)
			extension=tar.gz;;
		esac
		;;
	zip)
		extension=zip
		;;
	dir|*)
		extension=
		;;
	esac

	args=()
	if [ -n "$extension" ]; then
		args+=(".$extension")
	fi
	repo_name=$(basename "$input" "${args[@]}")
	if [ $? -ne 0 ]; then
		failures+=("$input")
		perror "cannot get basename"
		continue
	fi
	if [ -n "$repo" ]; then
		repo_name="$repo"
	fi

	clone_url="$("$ari_gc_giturl" -p "$git_proto" -o "$org_name" \
	  -r "$repo_name")" || clone_url=
	if [ -z "$clone_url" ]; then
		perror "cannot get clone URL"
		continue
	fi

	failed=0

	############################################################
	# Create the Git repository
	############################################################

	# No clean up is necessary.
	tmp_org_name=
	tmp_repo_name=

	args=()
	args+=(-D "$debug_level")
	args+=(-o "$org_name")
	args+=("$repo_name")
	if [ "$verbose" -ge 2 ]; then
		echo "Running $ari_gc_createrepo ${args[@]}"
	fi
	"$ari_gc_createrepo" "${args[@]}" || failed=1

	# Mark repository as needing to be deleted upon failure.
	if [ "$failed" -eq 0 ]; then
		tmp_org_name="$org_name"
		tmp_repo_name="$repo_name"
	fi

	############################################################
	# Populate the Git repository
	############################################################

	if [ "$failed" -eq 0 ]; then
		args=()
		if [ "$verbose" -ge 1 ]; then
			args+=(-v)
		fi
		if [ "$verbose" -ge 2 ]; then
			args+=(-v)
		fi
		args+=(-D "$debug_level")
		args+=(-t "$input_type")
		args+=("$input")
		args+=("$clone_url")
		if [ "$verbose" -ge 2 ]; then
			echo "Running $ari_git_makerepo ${args[@]}"
		fi
		"$ari_git_makerepo" "${args[@]}" || failed=1
		if [ "$failed" -ne 0 ]; then
			# No clean up is necessary.
			tmp_repo_name=
			tmp_org_name=
		fi
	fi

	############################################################
	# Delete the Git repository upon failure
	############################################################

	if [ "$failed" -ne 0 -a -n "$tmp_org_name" -a -n "$tmp_repo_name" ]; then
		failures+=("$input")
		perror "cannot make repository"
		"$ari_gc_deleterepo" -D "$debug_level" -o "$org_name" "$repo_name"
		if [ $? -ne 0 ]; then
			perror "cannot delete partially constructed repository"
		fi
		# No clean up is necessary.
		tmp_repo_name=
		tmp_org_name=
	fi

	# No clean up is necessary.
	tmp_org_name=
	tmp_repo_name=

done

if [ "${#failures[@]}" -ne 0 ]; then
	echo "The following inputs could not be successfully processed:"
	for failure in "${failures[@]}"; do
		echo "    $failure"
	done
	panic "failed"
fi
