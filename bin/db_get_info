#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1

function panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-d
	    Enable debugging.
	-m operation
	    Set the operation to perform to operation.
	-i input_file
	    Set the input file to input_file.
	-r record_no
	    Set the record number to be queried to record_no.
	-f field_no
	    Set the field number to be queried to field_no.
	EOF
	exit 2
}

in_file=
record_no=
field_no=
operation=
debug=0

while getopts di:r:f:m: option; do
	case "$option" in
	d)
		debug=1;;
	m)
		operation="$OPTARG";;
	i)
		in_file="$OPTARG";;
	r)
		record_no="$OPTARG";;
	f)
		field_no="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$in_file" ]; then
	usage "no input file specified"
fi

case "$operation" in
get_num_records)
	;;
get_num_fields)
	if [ -z "$record_no" ]; then
		usage "no record number specified"
	fi
	;;
get_field)
	if [ -z "$record_no" ]; then
		usage "no record number specified"
	fi
	if [ -z "$field_no" ]; then
		usage "no field number specified"
	fi
	;;
*)
	usage "invalid operation $operation"
	;;
esac

cat "$in_file" | \
  awk -v operation="$operation" \
  -v the_record_no="$record_no" -v the_field_no="$field_no" \
  -v debug="$debug" \
  -v squote="'" '
	BEGIN {
		newline = "\n";
		dquote = "\"";
		bslash = "\\";
		active_field = 0;
		active_record = 0;
		record_no = -1;
		field_no = -1;
		quoted = "";
		if (debug) {
			err = "/dev/stderr";
		} else {
			err = "/dev/null";
		}
		if (operation == "get_num_records") {
			the_record_no = -2;
			the_field_no = -2;
		}
		printf "operation %s\n", operation > err;
		printf "the_record_no %s\n", the_record_no > err;
		printf "the_field_no %s\n", the_field_no > err;
	}
	END {
		if (operation == "get_num_records") {
			printf "%d\n", record_no + 1;
			exit 0;
		}
		if (operation == "get_field") {
			if (the_record_no > record_no) {
				printf "Record not found\n";
				exit 1;
			}
		}
	}
	{ 
		line = $0;
		line = line newline;
		n = length(line);
		i = 1;
		while (i <= n) {
			if (i - 1 >= 1) {
				prev_c = substr(line, i - 1, 1);
			} else {
				prev_c = "";
			}
			c = substr(line, i, 1);
			printf "line=%d rec=%d field=%d, active_field=%d, c=%s, buffer=%s\n", NR, record_no, field_no, active_field, c, buffer > err;
			if (active_field) {
				# We are currently processing characters in a field.
				if (c == squote && (quoted == "" || quoted == squote)) {
					# We are either inside single quotes or not quoting, and
					# the character is a single quote.
					if (quoted == squote) {
						# End single quotes.
						quoted = "";
					} else {
						# Start single quotes.
						quoted = squote;
					}
				} else if (c == dquote &&
				  (quoted == "" || quoted == dquote)) {
					# We are either inside double quotes or not quoting, and
					# the character is a double quote.
					if (quoted == dquote) {
						# End double quotes.
						quoted = "";
					} else {
						# Start double quotes.
						quoted = dquote;
					}
				} else if (quoted == "" && c == bslash) {
					# We are not quoting, and the character is a backslash.
					# Move to the next character.
					++i;
					if (i <= n) {
						# We have not reached end of line.
						c = substr(line, i, 1);
						buffer = buffer c;
					}
				} else if (quoted == "" && c == "#") {
					# We are not quoting, and the character is a hash.
					if (record_no == the_record_no &&
					  field_no == the_field_no) {
						# OUTPUT: Print the field.
						printf "%s\n", buffer
						exit 0;
					}
					--i;
					printf "Terminating field.\n" > err;
					active_field = 0;
					++field_no;
					buffer = "";
if (operation == "get_num_fields" && record_no == the_record_no) {
	printf "%d\n", field_no;
	exit 0;
}
					printf "Terminating record.\n" > err;
					active_record = 0;
					printf "active_record=%d, active_field=%d\n",
					  active_record, active_field > err;
				} else if (quoted == "" && (c == " " || c == "\t" ||
				  c == newline)) {
					# We are not quoting, and the character is a space or tab.
					if (record_no == the_record_no &&
					  field_no == the_field_no) {
						# OUTPUT: Print the field.
						printf "%s\n", buffer
						exit 0;
					}
					printf "Terminating field.\n" > err;
					active_field = 0;
					++field_no;
					buffer = "";
					if (c == newline) {
						printf "Terminating record.\n" > err;
if (operation == "get_num_fields" && record_no == the_record_no) {
	printf "%d\n", field_no;
	exit 0;
}
						field_no = -1;
						active_record = 0;
					}
					printf "active_record=%d, active_field=%d\n",
					  active_record, active_field > err;
				} else {
					# The character is to be taken literally.
					buffer = buffer c;
				}

			} else {
				# We are not currently processing characters in a field.
				if (c == "#") {
					# The character is a hash.
if (operation == "get_num_fields" && record_no == the_record_no) {
	printf "%d\n", field_no;
	exit 0;
}
					printf "Terminating record.\n" > err;
					if (field_no >= 0) {
						field_no = -1;
						buffer = ""
						quoted = "";
					}
					active_record = 0;
					# Skip the remainder of the line.
					i = n;
				} else if (c == bslash) {
					++i;
					if (i <= n) {
						c = substr(line, i, 1);
						if (c == newline) {
							# We have encountered a line continuation.
							printf "Line continuation.\n" > err;
						} else if (c == " " || c == "\t") {
							# Eat whitespace.
						} else {
							# We have reached the start of a field.
							active_field = 1;
							# Put back the character.
							--i;
							printf "active_record=%d, active_field=%d\n",
							  active_record, active_field > err;
						}
					}
				} else if (c == " " || c == "\t") {
					# The character is a space or tab.
					# Just eat the whitespace.
				} else if (c == newline) {
					if (active_record) {
						printf "Terminating record.\n" > err;
if (operation == "get_num_fields" && record_no == the_record_no) {
	printf "%d\n", field_no;
	exit 0;
}
					}
					active_record = 0;
					field_no = 0;
				} else {
					# We have reached the start of a field.
					if (!active_record) {
						# We have reached the first field in the record.
						active_record = 1;
						printf "Starting record.\n" > err;
						++record_no;
						field_no = 0;
						#quoted = "";
					}
					active_field = 1;
					printf "active_record=%d, active_field=%d\n",
					  active_record, active_field > err;
					# Put back the character.
					--i;
				}
			}
			# Move to the next character.
			++i;
		}
	}
' -

