#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2019 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

eecho()
{
	echo "$@" 1>&2
}

panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

print_status()
{
	local package
	local operation
	local target
	local status
	if [ $# -eq 4 ]; then
		package="$1"
		operation="$2"
		target="$3"
		status="$4"
		if [ -n "$status" ]; then
			if [ "$status" -eq 0 ]; then
				status="OK"
			else
				status="FAIL"
			fi
		else
			status="UNKNOWN"
		fi
	else
		package="Package"
		operation="Operation"
		target="Target"
		status="Status"
	fi
	printf "%-16.16s %-9.9s %-16.16s %-s\n" \
	  "$package" "$operation" "$target" "$status"
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options]

	Options
	=======

	-d \$work_dir
	    Set the workspace directory to \$work_dir.
	-r \$repo_regex
	    Set the repository regular expression to \$repo_regex.
	-p \$package_regex
	    Set the package regular expression to \$package_regex.
	-o \$organization
	    Set the GitHub organization to \$organization.
	-n
	    Disable the creation of issues.
	-D \$debug_level
	    Set the debug level to \$debug_level.

	Examples
	========

	$0 -d dostat -o uvic-seng475 -r 'tools-.*'
	EOF
	exit 2
}

cmd_dir=$(dirname "$0") || panic "cannot get program directory"
cmd_dir=$(realpath "$cmd_dir") || panic "cannot get real path of program"
ari_hub="$cmd_dir/ari_hub"
ari_info="$cmd_dir/ari_info"
ari_gc_getcred="$cmd_dir/ari_gc_getcred"
ari_gc_giturl="$cmd_dir/ari_gc_giturl"

debug_level="${ARI_DEBUG_LEVEL:-0}"
organization=
repo_regex=".*"
package_regex=".*"
work_dir=
branch=master
enable_issues=1
reproducible=0
verbose=0
inter_item_sleep=10
inter_iter_sleep=60
git_proto="$("$ari_gc_getcred" -k gc_git_protocol)" || git_proto=https

while getopts D:r:p:o:d:nRvg:y:z: option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		work_dir="$OPTARG";;
	r)
		repo_regex="$OPTARG";;
	p)
		package_regex="$OPTARG";;
	o)
		organization="$OPTARG";;
	n)
		enable_issues=0;;
	R)
		reproducible=1;;
	v)
		verbose=$((verbose + 1));;
	g)
		git_proto="$OPTARG";;
	y)
		inter_iter_sleep="$OPTARG";;
	z)
		inter_item_sleep="$OPTARG";;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ -z "$work_dir" ]; then
	usage "no work directory specified"
fi
if [ -z "$organization" ]; then
	usage "no organization specified"
fi
if [ -z "$repo_regex" ]; then
	usage "no repositories specified"
fi
if [ -z "$package_regex" ]; then
	usage "no packages specified"
fi
case "$git_proto" in
https|http|ssh)
	;;
*)
	usage "invalid Git protocol"
esac

work_dir=$(realpath "$work_dir") || \
  panic "cannot get real path of workspace directory"
tmp_dir="$work_dir/tmp"

for dir in "$work_dir" "$tmp_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory"
	fi
done

first=1

# states:
# none: repository did not previously exist
# empty: repository is empty
# no_master: repository is not empty but has no master branch
# master: repository has master branch

iter_no=0
while true; do


	if [ "$verbose" -ge 1 ]; then
		cat <<- EOF
		############################################################
		Iteration: $iter_no
		############################################################
		EOF
	fi

	repo_names=($(ari_gc_lsrepo -o "$organization" | \
	  grep -E '^'"$repo_regex"'$')) || \
	  panic "cannot get list of repositories"
	if [ "$verbose" -ge 1 ]; then
		eecho "number of repositories: ${#repo_names[@]}"
		eecho "repositories:"
		for repo_name in "${repo_names[@]}"; do
			eecho "    $repo_name"
		done
	fi

	for repo_index in "${!repo_names[@]}"; do

		repo_name="${repo_names[$repo_index]}"

		skip=0

		repo_url="$("$ari_gc_giturl" -p "$git_proto" -o "$organization" \
		  -r "$repo_name")" || panic "cannot get repository URL"

		item_dir="$work_dir/$repo_name"
		state_file="$item_dir/state"
		old_commit_id_file="$item_dir/commit_id"
		old_issue_file="$item_dir/issue"
		old_workspace_dir="$item_dir/workspace"
		workspace_dir="$item_dir/tmp_workspace"
		repo_dir="$item_dir/repository"
		commit_id_file="$workspace_dir/commit_id"
		validate_status_file="$workspace_dir/validate/status"
		issue_dir="$item_dir/issues"
		tmp_file="$tmp_dir/hub_issue"
		time="$(date +%Y-%m-%d-%H-%M-%S)" || panic "cannot get time"
		issue_file="$issue_dir/issue-$time"
		workspace_valid=0
		make_issue=0
		commit_id=
		old_state=
		state=
		start_time="$(date +%Y-%m-%dT%H:%M)" || panic

		if [ "$verbose" -ge 1 ]; then
			cat <<- EOF
			############################################################
			Processing $repo_name ($((repo_index + 1))/${#repo_names[@]}) [$start_time]
			############################################################
			EOF
		fi

		for dir in "$item_dir" "$issue_dir"; do
			if [ ! -d "$dir" ]; then
				mkdir -p "$dir" || \
				  panic "cannot make directory $dir"
			fi
		done

		for dir in "$repo_dir" "$workspace_dir"; do
			if [ -d "$dir" ]; then
				rm -rf "$dir" || panic "cannot remove directory $dir"
			fi
			mkdir -p "$dir" || \
			  panic "cannot make directory $dir"
		done

		git clone -q "$repo_url" "$repo_dir" || \
		  panic "cannot clone repository $repo_url"

		echo -n "" > "$tmp_file" || panic "echo failed"

		if [ -f "$state_file" ]; then
			old_state="$(cat "$state_file")" || \
			  panic "cannot get state"
		else
			old_state=none
		fi

		# Check for an empty repository.
		empty_repo="$(GIT_DIR="$repo_dir/.git" ari_git_isempty)" || \
		  panic "check for empty repository failed"
		if [ "$empty_repo" -ne 0 ]; then
			if [ "$verbose" -ge 1 ]; then
				eecho "warning: empty repository"
			fi
			cat >> "$tmp_file" <<- EOF
			Status: Error (Empty Repository)

			The repository is empty.
			As a submission, this would result in grade of zero.
			EOF
			[ $? -eq 0 ] || panic "output failed"
			state=empty
			if [ "$old_state" != "$state" ]; then
				make_issue=1
			fi
			skip=1

		fi

		# This appears to be incorrect.
		# The git rev-parse always fails.
		if [ "$skip" -eq 0 ]; then
			# Note: Checking for master (as opposed to origin/master) seems
			# not to work in all cases.  For example, it seems to fail when
			# the master and main branches share not common ancestor.
			(cd "$repo_dir" && \
			  git rev-parse --verify origin/master >& /dev/null)
			if [ $? -ne 0 ]; then
				cat >> "$tmp_file" <<- EOF
				Status: Error (No Branch Named "master")

				The repository has no branch named "master".
				As a submission, this would result in grade of zero.
				EOF
				[ $? -eq 0 ] || panic "output failed"
				state=no_master
				if [ "$old_state" != "$state" ]; then
					make_issue=1
				fi
				skip=1
			fi
		fi

		if [ "$skip" -eq 0 ]; then
			(cd "$repo_dir" && git checkout -q "$branch")
			if [ $? -ne 0 ]; then
				eecho "warning: cannot checkout $branch"
				cat >> "$tmp_file" <<- EOF
				Status: Error (Checkout Failed)

				The master branch cannot be checked out.
				(Most likely, there is no branch called "master".)
				As a submission, this would result in grade of zero.
				EOF
				[ $? -eq 0 ] || panic "output failed"
				state=no_master
				if [ "$old_state" != "$state" ]; then
					make_issue=1
				fi
				skip=1
			fi
		fi

		if [ "$skip" -eq 0 ]; then

			# Get the commit ID that has been checked out.
			commit_id=$( (cd "$repo_dir" && git rev-parse HEAD) ) || \
			  panic "cannot get commit ID of HEAD"
			if [ -z "$commit_id" ]; then
				panic "bad commit ID"
			fi

			state=master

			ari_import1_options=()
			if [ "$verbose" -ge 1 ]; then
				ari_import1_options+=(-v)
			fi
			ari_import1 "${ari_import1_options[@]}" \
			  -t git_working_tree -i "$repo_dir" -d "$workspace_dir" \
			  2> /dev/null
			status=$?
			#if [ "$status" -ne 0 ]; then
			#	#if [ "$verbose" -ge 1 ]; then
			#	#	eecho "warning: skipping $repo_name due to import failure"
			#	#fi
			#	workspace_valid=0
			#	#skip=1
			#else
			#	workspace_valid=1
			#fi
			if [ "$status" -eq 0 ]; then
				workspace_valid=1
			fi

		fi

		[ -n "$state" ] || panic "internal error (state not set)"

		if [ "$skip" -eq 0 ]; then

			if [ -f "$old_commit_id_file" ]; then
				old_commit_id="$(cat "$old_commit_id_file")" || \
				  panic "cannot get commit ID"
			else
				old_commit_id=
			fi

			if [ "$workspace_valid" -ne 0 ]; then
				workspace_commit_id="$(cat "$commit_id_file")" || \
				  panic "cannot get commit ID"
				if [ -z "$commit_id" ]; then
					panic "bad commit ID"
				fi
				if [ "$workspace_commit_id" != "$commit_id" ]; then
					panic "commit ID mismatch detected"
				fi
			fi

			if [ "$debug_level" -ge 1 ]; then
				eecho "old commit ID: $old_commit_id"
				eecho "new commit ID: $commit_id"
			fi
			if [ -n "$old_commit_id" -a "$old_commit_id" = "$commit_id" ]; then
				if [ "$verbose" -ge 1 ]; then
					eecho "repository unchanged"
				fi
				make_issue=0
				skip=1
			fi

		fi

		if [ "$skip" -eq 0 -a "$workspace_valid" -ne 0 ]; then

			project="$(cat "$workspace_dir/assignment_id")" || \
			  panic "cannot get assignment ID"

		fi

		# Note: From this point onwards, the issue header has been set.
		if [ "$skip" -eq 0 ]; then
			cat >> "$tmp_file" <<- EOF
			Status: Commit $commit_id

			Commit ID: $commit_id
			EOF
			[ $? -eq 0 ] || panic "output failed"
		fi

		if [ "$skip" -eq 0 ]; then
			if [ "$workspace_valid" -eq 0 ]; then
				cat >> "$tmp_file" <<- EOF
				The import of the repository has failed.
				As a submission, this would result in grade of zero.
				EOF
				[ $? -eq 0 ] || panic "output failed"
				# Note $state should be master here
				if [ "$old_state" != "$state" -o \
				  "$commit_id" != "$old_commit_id" ]; then
					make_issue=1
				fi
				skip=1
			fi
		fi

		#if [ "$skip" -eq 0 ]; then
		#	if [ -L "$old_issue_file" ]; then
		#		rm -f "$old_issue_file" || \
		#		  panic "cannot remove $old_issue_file"
		#	fi
		#fi

		if [ "$skip" -eq 0 -a "$workspace_valid" -ne 0 ]; then

			ari_process_options=()
			if [ "$verbose" -ge 1 ]; then
				ari_process_options+=(-v)
			fi
			if [ "$reproducible" -ne 0 ]; then
				ari_process_options+=(-R)
			fi
			ari_process "${ari_process_options[@]}" "$workspace_dir"
			status=$?

		fi

		if [ "$skip" -eq 0 ]; then
			if [ "$workspace_valid" -ne 0 ]; then
				if [ -f "$validate_status_file" ]; then
					validate_status=$(cat "$validate_status_file") || \
					  panic "cannot get validate status"
				else
					validate_status=1
				fi
			else
				validate_status=1
			fi
		fi

		if [ "$skip" -eq 0 ]; then
			if [ "$validate_status" -eq 0 ]; then
				packages=($("$ari_info" -a "$project" packages)) || \
				  panic "cannot get package list"
			else
				packages=()
				cat >> "$tmp_file" <<- EOF
				The repository has failed validation.
				As a submission, this would result in grade of zero.
				EOF
				[ $? -eq 0 ] || panic "output failed"
				# Note: $state should be master here
				if [ "$old_state" != "$state" -o \
				  "$commit_id" != "$old_commit_id" ]; then
					make_issue=1
				fi
				skip=1
			fi
		fi

		if [ "$skip" -eq 0 -a "$workspace_valid" -ne 0 ]; then

			if [ "$debug_level" -ge 1 ]; then
				eecho "packages:"
				for i in "${packages[@]}"; do
					eecho "    $i"
				done
			fi

			if [ "${#packages[@]}" -gt 0 ]; then
				printf "<pre>\n" >> "$tmp_file" || \
				  panic "output failed"
				print_status >> "$tmp_file" || \
				  panic "output failed"
			fi
			for package in "${packages[@]}"; do
				package_dir="$workspace_dir/package-$package"
				configure_status_file="$package_dir/configure/status"
				generate_status_file="$package_dir/generate/status"

				build_type=$("$ari_info" \
				  -a "$project" package-"$package"/build_tool) || \
				  panic "cannot get build type"
				case "$build_type" in
				none)
					has_configure=0
					has_build=0
					;;
				*)
					has_configure=1
					has_build=1
					;;
				esac

				build_targets=($("$ari_info" \
				  -a "$project" "package-$package/builds")) || \
				  panic "cannot get build targets"
				test_targets=($("$ari_info" \
				  -a "$project" "package-$package/tests")) || \
				  panic "cannot get test targets"

				package_optional=$("$ari_info" \
				  -a "$project" "package-$package/optional") || \
				  panic "cannot get optional"

				if [ -f "$generate_status_file" ]; then
					generate_status="$(cat "$generate_status_file")"
				else
					generate_status=
				fi
				print_status \
				  "$package" "generate" "---" "$generate_status" \
				  >> "$tmp_file" || \
				  panic

				if [ "$has_configure" -ne 0 ]; then

					if [ -f "$configure_status_file" ]; then
						configure_status="$(cat "$configure_status_file")"
					else
						configure_status=
					fi
					print_status \
					  "$package" "configure" "---" "$configure_status" \
					  >> "$tmp_file" || \
					  panic

				fi

				if [ "$has_build" -ne 0 ]; then

					for target in "${build_targets[@]}"; do
						build_status_file="$package_dir/build-$target/status"
						if [ -f "$build_status_file" ]; then
							build_status="$(cat "$build_status_file")"
						else
							build_status=
						fi
						print_status \
						  "$package" "build" "$target" "$build_status" \
						  >> "$tmp_file" || \
						  panic
					done

				fi

				for target in "${test_targets[@]}"; do

					test_optional=$("$ari_info" \
					  -a "$project" \
					  "package-$package/test-$target/optional") || \
					  panic "cannot get optional"

					# Do not provide information about optional test targets.
					if [ "$package_optional" -ne 0 ]; then
						continue
					fi
					if [ "$test_optional" -ne 0 ]; then
						continue
					fi
					test_status_file="$package_dir/test-$target/status"
					if [ -f "$test_status_file" ]; then
						test_status="$(cat "$test_status_file")"
					else
						test_status=
					fi
					print_status \
					  "$package" "test" "$target" "$test_status" \
					  >> "$tmp_file" || \
					  panic
				done
			done
			if [ "${#packages[@]}" -gt 0 ]; then
				printf "</pre>\n" >> "$tmp_file" || \
				  panic "cannot append to temporary file"
			fi

			state=master
			make_issue=1

		fi

		if [ "$make_issue" -ne 0 ]; then

			if [ "$commit_id" == $'\n' -o "$commit_id" = " " ]; then
				commit_id=
			fi

			message="$(cat "$tmp_file")" || panic "cat failed"
			echo
			cat <<- EOF
			======== START OF HUB ISSUE ==========
			$message
			======== END OF HUB ISSUE ==========
			EOF
			[ $? -eq 0 ] || panic "output failed"

			cp "$tmp_file" "$issue_file" || panic "cannot copy file"

			ln -s -f "issues/$(basename "$issue_file")" "$old_issue_file" || \
			  panic "cannot create symlink"

			if [ "$enable_issues" -ne 0 ]; then
				issue_url="$( (cd "$repo_dir" && \
				  "$ari_hub" issue create -m "$message") )"
			fi

			echo "$state" > "$state_file" || \
			  panic "cannot update state"

			if [ "$state" == "master" ]; then
				echo "$commit_id" > "$old_commit_id_file" || \
				  panic "cannot update commit ID"
			fi

			if [ -d "$old_workspace_dir" ]; then
				rm -rf "$old_workspace_dir" || \
				  panic "cannot remove old workspace directory"
			fi
			mv "$workspace_dir" "$old_workspace_dir" || \
			  panic "cannot rename workspace directory"

		fi

		#if [ "$first" -eq 0 ]; then
		eecho "sleep $inter_item_sleep"
		sleep "$inter_item_sleep" || panic "sleep failed"
		eecho "sleep complete"
		#fi
	done

	eecho "sleep $inter_iter_sleep"
	sleep "$inter_iter_sleep" || panic "sleep failed"
	eecho "sleep complete"

	first=0
	iter_no=$((iter_no + 1))

done
