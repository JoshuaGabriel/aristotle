#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

warn()
{
	echo "WARNING: $@" 1>&2
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options] input_source...

	Options
	=======

	-D debug_level
	    Set debug level to debug_level.
	-O
	    Skip optional items.
	-R
	    Enable reproducible mode (for testing).
	-v
	    Increase verbosity level of output.
	EOF
	exit 2
}

ari_validate="$cmd_dir/ari_validate"
ari_generate="$cmd_dir/ari_generate"
ari_build="$cmd_dir/ari_build"
ari_test="$cmd_dir/ari_test"
ari_report="$cmd_dir/ari_report"
ari_info="$cmd_dir/ari_info"

reproducible=0
skip_optional=0
debug_level=${ARI_DEBUG_LEVEL:-0}
verbose=0

while getopts ROD:o:v option; do
	case "$option" in
	R)
		reproducible=1;;
	O)
		skip_optional=1;;
	D)
		debug_level="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

validate_failures=()
all_failures=()
dirs=("$@")

for dir in "${dirs[@]}"; do

	project_dir="$dir"

	if [ ${#dirs[@]} -gt 1 ]; then
		cat <<- EOF
		############################################################
		Processing $dir
		############################################################
		EOF
	fi

	############################################################
	# Validate the assignment submission.
	############################################################

	validate_args=()
	validate_args+=(-D "$debug_level")
	validate_args+=(-d "$project_dir")
	if [ "$verbose" -ge 1 ]; then
		validate_opts+=(-v)
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running ari_validate ${validate_args[@]}"
	fi
	"$ari_validate" "${validate_args[@]}"
	validate_status=$?

	if [ "$validate_status" -ne 0 ]; then
		eecho "THIS ASSIGNMENT WILL RECEIVE A MARK OF ZERO IF SUBMITTED!"
		warn "validation failed for input $dir"
		warn "skipping remainder of processing for input $dir"
		validate_failures+=("$dir")
		all_failures+=("$dir")
		continue
	fi

	############################################################
	# Generate the packages for the assignment.
	############################################################

	project=$(cat "$project_dir/assignment_id") || \
	  panic "cannot get assignment ID"
	student_name=$(cat "$project_dir/student_name") || \
	  panic "cannot get student name"
	student_id=$(cat "$project_dir/student_id") || \
	  panic "cannot get student ID"
	section=$(cat "$project_dir/section") || \
	  panic "cannot get section"
	mangled_student_name=$(echo "$student_name" | sed 's/[^a-zA-Z]/_/g') || \
	  panic "cannot compute mangled student name"

	generate_args=()
	if [ "$verbose" -ge 1 ]; then
		generate_args+=(-v)
	fi
	if [ "$reproducible" -ne 0 ]; then
		generate_args+=(-R)
	fi
	generate_args+=(-D "$debug_level")
	generate_args+=(-d "$project_dir")
	if [ "$skip_optional" -ne 0 ]; then
		generate_args+=(-O)
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running ari_generate ${generate_args[@]}"
	fi
	"$ari_generate" "${generate_args[@]}"
	if [ $? -ne 0 ]; then
		echo "generation failed"
		all_failures+=("$dir")
		continue
	fi

	############################################################
	# Build the packages for the assignment.
	############################################################

	build_args=()
	if [ "$verbose" -ge 1 ]; then
		build_args+=(-v)
	fi
	build_args+=(-D "$debug_level")
	build_args+=(-d "$project_dir")
	build_args+=(-c)
	if [ "$reproducible" -ne 0 ]; then
		build_args+=(-R)
	fi
	if [ "$skip_optional" -ne 0 ]; then
		build_args+=(-O)
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "Running ari_build ${build_args[@]}"
	fi
	"$ari_build" "${build_args[@]}"
	if [ $? -ne 0 ]; then
		echo "build failed"
		all_failures+=("$dir")
		continue
	fi

	############################################################
	# Test the packages for the assignment.
	############################################################

	test_args=()
	if [ "$skip_optional" -ne 0 ]; then
		test_args+=(-O)
	fi
	if [ "$verbose" -ge 1 ]; then
		test_args+=(-v)
	fi
	test_args+=(-D "$debug_level")
	test_args+=(-d "$project_dir")
	if [ "$reproducible" -ne 0 ]; then
		test_args+=(-R)
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "Testing"
	fi
	"$ari_test" "${test_args[@]}"
	if [ $? -ne 0 ]; then
		echo "test failed"
		all_failures+=("$dir")
		continue
	fi

	############################################################
	# Generate the report for the assignment.
	############################################################

	report_args=()
	if [ "$skip_optional" -ne 0 ]; then
		report_args+=(-O)
	fi
	report_args+=(-D "$debug_level")
	report_args+=(-d "$project_dir")
	report_args+=(-o "$project_dir/report.pdf")
	if [ "$reproducible" -ne 0 ]; then
		report_args+=(-R)
	fi
	if [ "$debug_level" -ge 1 ]; then
		eecho "Reporting"
	fi
	if [ 0 -ne 0 -a "$verbose" -ge 1 ]; then
		report_args+=(-v)
	fi
	"$ari_report" "${report_args[@]}"
	if [ $? -ne 0 ]; then
		echo "report failed"
		all_failures+=("$dir")
		continue
	fi

	alt_report_file="$project_dir/report-$project-$section-$mangled_student_name-$student_id.pdf"
	if [ -L "$alt_report_file" -o -e "$alt_report_file" ]; then
		rm -f "$alt_report_file" || \
		  panic "cannot remove file $alt_report_file"
	fi
	ln -s report.pdf "$alt_report_file" || panic "cannot make link"

done

if [ "${#dirs[@]}" -gt 1 ]; then
	cat <<- EOF
	############################################################
	Summary
	############################################################
	EOF
	echo "Number of validation failures: ${#validate_failures[@]}"
	if [ ${#validate_failures[@]} -gt 0 ]; then
		echo "Validation failures:"
		for dir in "${validate_failures[@]}"; do
			echo "$dir"
		done
	fi
	echo "Total number of failures: ${#all_failures[@]}"
	if [ ${#all_failures[@]} -gt 0 ]; then
		echo "All failures:"
		for dir in "${all_failures[@]}"; do
			echo "$dir"
		done
	fi
fi
