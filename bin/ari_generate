#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
abs_cmd_dir=$(readlink -f "$cmd_dir") || exit 1
source "$cmd_dir/utilities" || exit 1
#etc_dir="$cmd_dir/../etc"

usage()
{
	echo "$@"
	cat <<- EOF
	usage: $0 [options]
	options:
	-D debug_level
	    Set the debug level to debug_level.
	-d project_dir
	    Set the project directory to project_dir.
	-p package
	    Add the package package to the list of packages to be processed.
	-O
	    Skip the processing of optional packages.
	EOF
	exit 2
}

warn()
{
	eecho "WARNING: $@"
}

ari_info="$abs_cmd_dir/ari_info"
ari_locate="$abs_cmd_dir/ari_locate"
ari_lndir="$abs_cmd_dir/ari_lndir"
ari_find_assignment="$abs_cmd_dir/ari_find_assignment"

project_dir=$("$ari_locate" -q) || project_dir=
packages=()
debug_level=${ARI_DEBUG_LEVEL:-0}
skip_optional=0

while getopts D:d:p:O option; do
	case "$option" in
	D)
		debug_level="$OPTARG";;
	d)
		project_dir="$OPTARG";;
	p)
		packages+=("$OPTARG");;
	O)
		skip_optional=1;;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
	usage "unexpected command-line arguments"
fi

if [ -z "$project_dir" ]; then
	panic "empty"
fi

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

project=$(cat "$project_dir/assignment_id") || \
  panic "cannot get assignment ID"
assignment_file=$("$ari_find_assignment" -a "$project") || \
  panic "cannot find assignment $project"
assignment_dir=$(dirname "$assignment_file") || \
  panic "cannot get directory of $assignment_file"

if [ "${#packages[@]}" -eq 0 ]; then
	packages=($("$ari_info" -D "$debug_level" -a "$project" packages)) || \
	  panic "cannot get package"
fi

dist_dir="$project_dir/distribution"
extras_dir="$project_dir/extras"

if [ "$debug_level" -ge 1 ]; then
	eecho "number of packages: ${#packages[@]}"
	eecho "packages: ${packages[@]}"
fi

for package in "${packages[@]}"; do

	package_dir="$project_dir/package-$package"
	source_dir="$package_dir/source"

	if [ -d "$package_dir" ]; then
		warn "skipping generation of (previously-generated) package $package"
		continue
	fi

	optional=$("$ari_info" \
	  -D "$debug_level" -a "$project" package-"$package"/optional) || \
	  panic "cannot get optional"

	if [ "$optional" -ne 0 -a "$skip_optional" -ne 0 ]; then
		if [ "$debug_level" -ge 1 ]; then
			echo "skipping optional package"
		fi
		continue
	fi

	build_targets=($("$ari_info" \
	  -D "$debug_level" -a "$project" package-"$package"/builds)) || \
	  panic "cannot get build targets"
	test_targets=($("$ari_info" \
	  -D "$debug_level" -a "$project" package-"$package"/tests)) || \
	  panic "cannot get test targets"

	mkdir -p "$package_dir" || panic "cannot make directory $package_dir"

	for dir in source derived configure install; do
		target_dir="$package_dir/$dir"
		mkdir -p "$target_dir" || panic "cannot make directory $target_dir"
	done

	saved_ifs="$IFS"
	IFS=$'\ca'
	generate_program=($(\
	  ARI_WORKSPACE_DIR="$project_dir" \
	  ARI_EXTRAS_DIR="$extras_dir" \
	  ARI_ASSIGNMENT_DIR="$assignment_dir" \
	  ARI_BIN_DIR="$abs_cmd_dir" \
	  ARI_DIST_DIR="$dist_dir" \
	  ARI_SOURCE_DIR="$source_dir" \
	  "$ari_info" -D "$debug_level" -a "$project" -e -d "$IFS" \
	  package-"$package"/generate))
	status=$?
	IFS="$saved_ifs"
	if [ "$status" -ne 0 ]; then
		panic "cannot get generate script"
	fi

	if [ "${#generate_program[@]}" -ge 1 ]; then
		if [ ! -x "${generate_program[0]}" ]; then
			panic "cannot find executable ${generate_program[0]}"
		fi
		if [ "$debug_level" -ge 1 ]; then
			#eecho "Running generate program ${generate_program[@]}"
			eecho "Running ${generate_program[@]}"
		fi
		PATH="$PATH:$abs_cmd_dir" \
		  ARI_WORKSPACE_DIR="$project_dir" \
		  ARI_EXTRAS_DIR="$extras_dir" \
		  ARI_ASSIGNMENT_DIR="$assignment_dir" \
		  ARI_BIN_DIR="$abs_cmd_dir" \
		  ARI_DIST_DIR="$dist_dir" \
		  ARI_SOURCE_DIR="$source_dir" \
		  "${generate_program[@]}" || \
		  panic "generate failed"
	else
		if [ "$debug_level" -ge 1 ]; then
			eecho "Invoking default generate"
		fi
		# The following makes a link tree:
		#(chdir "$source_dir" && "$ari_lndir" ../../distribution) || \
		#  panic "cannot make link tree"
		# The following simply creates a link to the distribution directory:
		if [ -d "$source_dir" ]; then
			rm -rf "$source_dir" || panic "cannot remove directory $source_dir"
		fi
		ln -s ../distribution "$source_dir" || panic "cannot make symbolic link $source_dir"
	fi

	for target in "${build_targets[@]}"; do
		target_dir="$package_dir/build-$target"
		mkdir -p "$target_dir" || panic "cannot make directory $target_dir"
	done

	for target in "${test_targets[@]}"; do
		target_dir="$package_dir/test-$target"
		mkdir -p "$target_dir" || panic "cannot make directory $target_dir"
	done

done
