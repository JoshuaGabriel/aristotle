#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

EXIT_STATUS_EMPTY_REPO=3
EXIT_STATUS_VERIFY_TAG_FAILED=4

eecho()
{
	echo "$@" 1>&2
}

warn()
{
	echo "WARNING: $@" 1>&2
}

panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

# Note: Some systems treat "cd ''" as equivalent to "cd .".
chdir()
{
	if [ $# -ne 1 ]; then
		return 1
	fi
	local dir="$1"
	# Ensure that the directory is not an empty string.
	if [ -z "$dir" ]; then
		eecho "chdir: directory is empty string"
		return 1
	fi
	cd "$dir"
}

# Reference: https://coderwall.com/p/dsfmwa/securely-use-basic-auth-with-curl
auth_curl()
{
	local password_file="$1"
	shift 1
	#eecho 'user = "'"$user:$(cat $password_file)"'"'
	echo 'user = "'"$user:$(cat $password_file)"'"' | curl -K - -s "$@"
}

count_lines()
{
	# Note:
	# The command "wc -l" only counts newline characters.
	# So, using the "wc -l" command will give an incorrect line count
	# for a non-empty file that does not end with a newline character.
	# For example, a single-line text file without a newline character
	# will be reported by "wc -l" as having zero lines, which is incorrect.
	# Using awk avoids this problem.
	# cat "$1" | wc -l | awk '{print $1;}' -
	cat "$1" | awk 'END {print NR;}' -
}

is_absolute_pathname()
{
	if [ $# -ne 1 ]; then
		return 1
	fi
	local path="$1"
	if [[ "$path" = /* ]]; then
		echo 1
	else
		echo 0
	fi
}

pathname_relative_to()
{
	if [ $# -ne 2 ]; then
		return 1
	fi
	local other="$1"
	local pathname="$2"
	#eecho "pathname $pathname relative to $other"
	(chdir "$other" || exit 1; readlink -f "$pathname")
}

absolute_pathname()
{
	if [ $# -ne 1 ]; then
		return 1
	fi
	local pathname="$1"
	#eecho "absolute pathname $pathname"
	readlink -f "$pathname"
}

curl_select()
{
	awk -v field="$1" '
		BEGIN {
			separator_found = 0;
		}
		{
			if (!separator_found && $0 == "\r") {
				separator_found = 1;
			} else {
				if (field == "header") {
					if (!separator_found) {
						print $0;
					}
				} else {
					if (separator_found) {
						print $0;
					}
				}
			}
		}
	' -
}

#http_get_next_link()
#{
#	local buffer
#	echo "$1" 1>&2
#	echo ==== 1>&2
#	read buffer
#	echo "$buffer" 1>&2
#	if [ -z "$buffer" ]; then
#		return 3
#	fi
#	echo "$buffer"
#	return 0
#}

http_get_next_link()
{
	awk '
		(NR==1){
			#debuglog = "/dev/stderr";
			debuglog = "/dev/null";
			i = 1;
			len = length($0);
			while (i <= len) {
				inside = 0;
				url_buffer = "";
				while (i <= len) {
					c = substr($0, i, 1);
					#printf "CHAR %d %c\n", i, c >> debuglog;
					++i;
					if (c == "<") {
						inside = 1;
					} else if (c == ">") {
						inside = 0;
						#printf "%s\n", url_buffer >> debuglog;
						break;
					} else {
						if (inside) {
							url_buffer = url_buffer c;
						}
					}
				}
				if (i + 1 > len) {
					#print "HERE1" >> debuglog;
					exit 3;
				}
				c = substr($0, i, 1);
				++i;
				if (c != ";") {
					#print "HERE2" >> debuglog;
					exit 1;
				}
				while (i <= len) {
					c = substr($0, i, 1);
					if (c != " " && c != "\t") {
						break;
					}
					++i;
				}
				if (i + 5 > len) {
					#printf "HERE9\n" >> debuglog;
					exit 1;
				}
				if (substr($0, i, 5) != "rel=\"") {
					#printf "HERE3\n" >> debuglog;
					exit 1;
				}
				i += 5;
				if (substr($0, i, 4) == "next") {
					#printf "FOUND" >> debuglog;
					printf "%s\n", url_buffer;
					exit 0;
				}
			}
			#print "HERE4" >> debuglog;
			exit 1;
		}
	' -
}

conditionally_discard_output()
{
	local option="$1"
	shift 1
	case "$option" in
	stdout)
		"$@" > /dev/null;;
	stderr)
		"$@" 2> /dev/null;;
	stdout_stderr|stderr_stdout)
		"$@" >& /dev/null;;
	none|*)
		"$@";;
	esac
}

is_dir_empty()
{
	if [ $# -ne 1 ]; then
		return 2
	fi
	local dir="$1"
	if [ ! -d "$dir" ]; then
		return 2
	fi
	local buffer=$(ls -A "$dir") || return 2
	if [ -n "$buffer" ]; then
		return 1
	else
		return 0
	fi
}

# Concatenate the elements of an array into a single string with the array
# elements separated by the specified character.
function join_by { local IFS="$1"; shift; echo -n "$*"; }

check_for_ssh_key()
{
	if [ -z "$SSH_AGENT_PID" ]; then
		return 1
	fi
	ssh-add -L | grep -E -q -e '^ssh-rsa'
	local status=$?
	if [ "$status" -eq 0 ]; then
		return 0
	elif [ "$status" -eq 1 ]; then
		return 1
	else
		return 3
	fi
}

#function time_in_nanoseconds()
#{
#	date +%s%N
#	#python -c'import time; print repr(int(1e9 * time.time()))'
#}

function time_since_epoch()
{
	python -c'import time; print repr(time.time())'
}

#function real_arithmetic()
#{
#	if [ $# -ne  1 ]; then
#		return 1
#	fi
#	awk 'BEGIN{print '"$1"';}' /dev/null
#}

print_status()
{
	local package
	local operation
	local target
	local status
	local time
	local result
	local log_length
	local info
	local info_items
	local reproducible
	if [ $# -lt 8 ]; then
		package="Package"
		operation="Operation"
		target="Target"
		info="Status"
	else
		reproducible="$1"
		package="$2"
		operation="$3"
		target="$4"
		status="$5"
		time="$6"
		result="$7"
		log_length="$8"
		if [ -z "$status" ]; then
			info="?"
		elif [ "$status" = D ]; then
			info="? (dependency)"
		elif [ "$status" = M ]; then
			info="? (manual)"
		elif [ "$status" = "0" ]; then
			info="OK"
			#if [ -n "$result" -a "$reproducible" -eq 0 ]; then
			#	info_items+=("${result}")
			#fi
			if [ -n "$result" ]; then
				info_items+=("${result}")
			fi
			if [ "$reproducible" -eq 0 ]; then
				info_items+=("${time}s")
			else
				info_items+=("?s")
			fi
		else
			info="FAIL"
			info_items+=("${status}")
			if [ -n "$result" ]; then
				info_items+=("${result}")
			fi
			if [ "$reproducible" -eq 0 ]; then
				info_items+=("${time}s")
			else
				info_items+=("?s")
			fi
			if [ "$reproducible" -eq 0 ]; then
				info_items+=("${log_length}L")
			else
				info_items+=("?L")
			fi
		fi
	fi
	if [ "${#info_items[@]}" -gt 0 ]; then
		info="$info (${info_items[*]})"
	fi
	printf "%-16.16s %-9.9s %-16.16s %-s\n" \
	  "$package" "$operation" "$target" "$info"
}

#line_terminator()
#{
#	local in_file="$1"
#	local format="unknown"
#	local unix_format=0
#	local dos_format=0
#	unix2dos < "$in_file" | cmp -s - "$in_file" && dos_format=1
#	dos2unix < "$in_file" | cmp -s - "$in_file" && unix_format=1
#	if [ "$unix_format" -ne 0 ]; then
#		echo unix
#	elif [ "$dos_format" -ne 0 ]; then
#		echo dos
#	else
#		echo unknown
#	fi
#}

line_terminator()
{
	local in_file="$1"
	local format=unix
	grep -q -U -e $'\r' "$in_file" && format=dos
	echo "$format"
}

min()
{
	local first="$1"
	local second="$2"
	echo $(( first < second ? first : second ))
}

max()
{
	local first="$1"
	local second="$2"
	echo $(( first > second ? first : second ))
}

compare_versions()
{
	local x=($(tr '.' ' ' <<< "$1"))
	local y=($(tr '.' ' ' <<< "$2"))
	local xv
	local yv
	local i=0
	local result=0
	while [ "$i" -lt 3 ]; do
		if [ "$i" -lt "${#x[@]}" ]; then
			xv="${x[$i]}"
		else
			xv=0
		fi
		if [ "$i" -lt "${#y[@]}" ]; then
			yv="${y[$i]}"
		else
			yv=0
		fi
		if [ "$xv" -lt "$yv" ]; then
			result="-1"
			break
		elif [ "$xv" -gt "$yv" ]; then
			result="1"
			break
		fi
		i=$((i + 1))
	done
	echo "$result"
}
