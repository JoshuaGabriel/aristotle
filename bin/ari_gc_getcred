#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

user_config_dir="$HOME/.aristotle"
gc_username_file="$user_config_dir/gc_username"
gc_password_file="$user_config_dir/gc_password"
gc_token_file="$user_config_dir/gc_token"
gh_token_file="$user_config_dir/gh_token"

get_token()
{
	if [ -n "$ARI_GH_TOKEN" ]; then
		echo "$ARI_GH_TOKEN" || panic "echo failed"
	#elif [ -n "$GITHUB_TOKEN" ]; then
	#	echo "$GITHUB_TOKEN" || panic "echo failed"
	#elif [ -n "$GH_TOKEN" ]; then
	#	echo "$GH_TOKEN" || panic "echo failed"
	elif [ -f "$gc_token_file" ]; then
		cat "$gc_token_file" || panic "cat failed"
	elif [ -f "$gh_token_file" ]; then
		cat "$gh_token_file" || panic "cat failed"
	else
		panic "cannot determine GitHub personal authentication token (PAT)"
	fi
}

get_username()
{
	if [ -f "$gc_username_file" ]; then
		cat "$gc_username_file" || panic "cat failed"
	else
		panic "cannot determine GitHub username"
	fi
}

get_password()
{
	if [ -f "$gc_password_file" ]; then
		cat "$gc_password_file" || panic "cat failed"
	else
		panic "cannot determine GitHub password"
	fi
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options]

	Options
	=======

	-k \$key
	    Get the value of the key \$key.
	    Valid values for \$key are: username, password, token

	-D debug_level
	    Set the debug level to debug_level.
	EOF
	exit 2
}

debug_level=${ARI_DEBUG_LEVEL:-0}
keys=()

while getopts k:D:- option; do
	case "$option" in
	k)
		keys+=("$OPTARG");;
	D)
		debug_level="$OPTARG";;
	-)
		break;;
	*)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -gt 0 ]; then
	usage "invalid paramter"
fi

if [ "$debug_level" -ge 1 ]; then
	set -xv
fi

for key in "${keys[@]}"; do

	case "$key" in
	username)
		get_username;;
	password)
		get_password;;
	token)
		get_token;;
	*)
		;;
	esac

done
