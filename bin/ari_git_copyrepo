#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017 Michael D. Adams
# All rights reserved.
# 
# This file is part of the Aristotle software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

cmd_dir=$(dirname "$0") || exit 1
source "$cmd_dir/utilities" || exit 1

perror()
{
	echo "ERROR: $@"
}

usage()
{
	if [ $# -gt 0 ]; then
		echo "$@" 1>&2
	fi
	cat <<- EOF
	Usage
	=====

	$0 [options] \$source_repo \$target_repo

	Description
	===========

	This command creates an exact copy of a Git repository.
	The source repository identified by \$source_repo is
	duplicated exactly in the target repository identified
	by \$target_repo.

	Options
	=======

	-r
	    Specify that target repository is remote.
	-C
	    Disable cleanup.
	-D debug_level
	    Set the debug level to debug_level.
	-v
	    Increase the verbosity level of output.

	Examples
	========

	$0 https://github.com/mdadams/jasper.git jasper_copy.git
	EOF
	exit 2
}

user_name=$(whoami) || panic "cannot determine user"
host_name=$(hostname) || panic "cannot determine hostname"
tmp_dir_template="${ARI_TMPDIR:-/tmp}/ari_git_copyrepo-${user_name}@${host_name}-$$-XXXXXXXX"

ari_mktemp="$cmd_dir/ari_mktemp"

cleanup=1
debug_level=0
info_file=
output_type=
remote_target=0
verbose=0

while getopts CD:rv option; do
	case "$option" in
	r)
		remote_target=1;;
	C)
		cleanup=0;;
	D)
		debug_level="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	\?)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage "incorrect number of arguments"
fi

source_repo="$1"
target_repo="$2"

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$debug_level" -ge 1 ]; then
	discard_stdout=none
	discard_stderr=none
	discard_stdout_stderr=none
else
	discard_stdout=stdout
	discard_stderr=stderr
	discard_stdout_stderr=stdout_stderr
fi

command_status=0

while true; do

	if [ "$remote_target" -ne 0 ]; then
		tmp_dir=$("$ari_mktemp" -d "$tmp_dir_template")
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot make temporary directory"
			break
		fi
		bare_dir="$tmp_dir"
	else
		bare_dir="$target_repo"
	fi

	if [ "$verbose" -ge 2 ]; then
		echo "Running git clone --bare $source_repo $bare_dir"
	fi
	conditionally_discard_output "$discard_stdout_stderr" \
	  git clone --bare "$source_repo" "$bare_dir"
	if [ $? -ne 0 ]; then
		command_status=1
		perror "cannot clone repository $source_repo"
		break
	fi

	if [ "$remote_target" -ne 0 ]; then
		if [ "$verbose" -ge 2 ]; then
			echo "Running git push --mirror $target_repo"
		fi
		(chdir "$bare_dir" && \
		  conditionally_discard_output "$discard_stdout_stderr" \
		  git push --mirror "$target_repo")
		if [ $? -ne 0 ]; then
			command_status=1
			perror "cannot push to target repository $target_repo"
			break
		fi
	fi

	break

done

if [ "$remote_target" -ne 0 -a "$cleanup" -ne 0 ]; then
	if [ -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir"
	fi
fi

exit "$command_status"
